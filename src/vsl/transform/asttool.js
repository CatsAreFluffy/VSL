/**
 * Passed to Transformations to aid in transversing and modifying the AST
 * 
 * This should really only be generated by a Transformer unless you know what
 * you're doing.
 * 
 * This offers a range of functions to help in modifying an AST fragment. This
 * is offered to all transformations by a `Transformer` object and will provide
 * primarially the modification ability along with other common tasks. This
 * serves as an interface between the AST and a transformation.
 * 
 * This provides the necessary abstraction needed in order to prevent accidental
 * mutations and verify that the AST is indeed being properly transversed.
 */
export default class ASTTool {
    /**
     * Creates an ASTTool based on a fragment
     * 
     * If you aren't working with `Transformer` itself, you can ignore this and
     *  just read the function docs.
     * 
     * @param {Node} fragment - The node upon which the ASTTool operates
     * @param {Node|Node[]} parent - The parent node or array
     * @param {name} - The key `fragment` represents within it's parent. If the
     *     `parent` is an array, then this should be a referencing integer.
     */
    constructor(fragment: Node, parent: Node | Node[], name: any) {
        /** @private */
        this.fragment = fragment;
        
        /** @private */
        this.parent = parent;
        
        /** @private */
        this.name = name;

        /** @private */
        this.replacement = null;
    }
    
    
    /**
     * Replaces the fragment with a new node.
     * 
     * ### Overview
     * Use this method to replace the given node.
     * 
     * ### Notes
     * Ensure that the resulting node is of a correct type as no checks are done
     * as of this time.
     * 
     * @param {Node} with - the replacement node
     */
    replace(node: Node) {
        this.parent[this.name] = node;
    }
}