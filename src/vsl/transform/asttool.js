/**
 * Passed to Transformations to aid in transversing and modifying the AST
 * 
 * This should really only be generated by a Transformer unless you know what
 * you're doing.
 * 
 * This offers a range of functions to help in modifying an AST fragment.
 */
export default class ASTTool {
    /**
     * Creates an ASTTool based on a fragment
     * 
     * If you aren't working with `Transformer` itself, you can ignore this and
     *  just read the function docs.
     * 
     * This creates some other items which the client-class must be aware of
     *  in order for the tool to correctly work
     * 
     *  - `.replacement`: `null` or `Node`
     * 
     * @param {Node} fragment - The node upon which the ASTTool operates
     */
    constructor(fragment: Node) {
        /** @type {Node} */
        this.fragment = fragment;

        /** @type {Node?} */
        this.replacement = null;
    }
    
    
    /**
     * Replaces the fragment with a new node
     * 
     * Ensure that the resulting node is of a correct type as no checks are done
     * as of this time.
     * 
     * @param {Node} with - the replacement node
     */
    replace(node: Node) {
        this.replacement = node;
    }
    
    /**
     * Cleans out an ASTTool for reuse
     */
    clean() {
        this.replacement = null;
    }
}