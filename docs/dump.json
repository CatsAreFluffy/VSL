[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/cli/vsl.js",
    "content": "#!/usr/bin/env node\nimport VSLParser from '../vsl/parser/vslparser';\nimport VSLTokenizer from '../vsl/parser/vsltokenizer';\nimport VSLTransformer from '../vsl/transform/transformers/vsltransformer';\n\nimport readline from 'readline';\nimport util from 'util';\nimport colors from 'colors';\nimport { readFileSync } from 'fs';\nimport minimist from 'minimist';\nimport pjson from '../../package.json';\n\nconst print = console.log,\n    stdin = process.stdin,\n    argv = minimist(process.argv.slice(2),  {\n        alias: {\n            help: 'h',\n            parserrepl: 'p',\n            tokenizerrepl: 't',\n            transformrepl: 'r',\n            code: 'c'\n        },\n        booleans: [\n        ],\n        default: {\n        }\n    }),\n    tokenizer = new VSLTokenizer();\n\nlet code = '',\n    parser = new VSLParser(),\n    rl;\n\nstdin.setEncoding('utf-8');\n\nfunction display (output) {\n    print(util.inspect(output, {showHidden: false, depth: null, colors: true}));\n}\n\nfunction feed (code) {\n    let result;\n    if ((result = parser.feed(code))) {\n        return result;\n    } else {\n        if (result === null)\n            return;\n        print(\"Syntax Error\".red + \": \");\n        //TODO: tokenizer now returns formatted error\n        print(parser.error.message);\n    }\n}\n\nfunction exit () {\n    process.exit();\n}\n\nfunction help () {\n    print(`VSL: Versatile Scripting Language, v${pjson.version}\nUsage: vsl PATH_TO_VSL_FILE\n\nOptions:\n    -h, --help          Show help\n\nDebug REPLs:\n    -p, --parserrepl    Start parser REPL\n    -t, --tokenizerrepl Start tokenizer REPL\n    -r, --transformrepl Start parser -> VSLTransformer REPL\n    -c, --code CODE     Parse CODE`) || exit();\n}\n\nif (argv.help)\n    help();\n\nif (argv._.length)\n    display(feed(readFileSync(argv._[0]))) || exit();\n\nif (argv.code)\n    display(feed(argv.code)) || exit();\n\nif (argv.p || argv.t || argv.r)\n    rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout\n    });\n\nif (argv.r) {\n    function prompt() {\n        rl.setPrompt('vsl:transform> '.red.bold);\n        rl.prompt();\n    }\n    prompt();\n    let feeding = false;\n    let transformer = new VSLTransformer();\n    rl.on('line', function (input) {\n        if (input === 'exit')\n    \t\texit(rl.close());\n        if (feeding === true) {\n            let result = feed(input);\n            if (typeof result === 'undefined') {\n                feeding = false;\n                prompt();\n            } else if (result.length > 0) {\n                feeding = false;\n                display(result);\n                prompt();\n            } else\n                rl.prompt();\n            return;\n        }\n        parser = new VSLParser();\n    \tlet result = feed(input);\n    \ttransformer.queue(result.results);\n    \tif (typeof result === 'undefined')\n    \t    return prompt();\n    \t// check if got any tokens at all\n    \t// i.e. skip if all comments or no input\n    \tif (result.tokens && result.length < 1) {\n    \t    feeding = true;\n    \t    rl.setPrompt('>>>>>>>>>>>>> '.bold);\n    \t    return rl.prompt();\n    \t}\n    \tdisplay(result);\n        prompt();\n    });\n}\n\nif (argv.p) {\n    function prompt() {\n        rl.setPrompt('vsl:parser> '.red.bold);\n        rl.prompt();\n    }\n    prompt();\n    let feeding = false;\n    rl.on('line', function (input) {\n        if (input === 'exit')\n    \t\texit(rl.close());\n        if (feeding === true) {\n            let result = feed(input);\n            if (typeof result === 'undefined') {\n                feeding = false;\n                prompt();\n            } else if (result.length > 0) {\n                feeding = false;\n                display(result);\n                prompt();\n            } else\n                rl.prompt();\n            return;\n        }\n        parser = new VSLParser();\n    \tlet result = feed(input);\n    \tif (typeof result === 'undefined')\n    \t    return prompt();\n    \t// check if got any tokens at all\n    \t// i.e. skip if all comments or no imput\n    \tif (result.tokens && result.length < 1) {\n    \t    feeding = true;\n    \t    rl.setPrompt('>>>>>>>>>>> '.bold);\n    \t    return rl.prompt();\n    \t}\n    \tdisplay(result);\n        prompt();\n    });\n}\n\nif (argv.t) {\n    rl.setPrompt('vsl:tokenizer> '.red.bold);\n    rl.prompt();\n    rl.on('line', function(input) {\n        if (input === 'exit')\n    \t\trl.close() || exit();\n    \tdisplay(tokenizer.tokenize(input));\n        rl.prompt();\n    });\n}\n\nif (!argv.p && !argv.t && !argv.r) {\n    stdin.on('readable', function () {\n        let chunk = process.stdin.read();\n        if (chunk)\n            code += chunk;\n        else if (!code)\n            help();\n        while ((chunk = process.stdin.read()))\n            code += chunk;\n    });\n    stdin.on('end', function () {\n        display(feed(code));\n        exit();\n    });\n}",
    "static": true,
    "longname": "src/cli/vsl.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "print",
    "memberof": "src/cli/vsl.js",
    "static": true,
    "longname": "src/cli/vsl.js~print",
    "access": null,
    "export": false,
    "importPath": "vsl/src/cli/vsl.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "code",
    "memberof": "src/cli/vsl.js",
    "static": true,
    "longname": "src/cli/vsl.js~code",
    "access": null,
    "export": false,
    "importPath": "vsl/src/cli/vsl.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "function",
    "name": "display",
    "memberof": "src/cli/vsl.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cli/vsl.js~display",
    "access": null,
    "export": false,
    "importPath": "vsl/src/cli/vsl.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "output",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 4,
    "kind": "function",
    "name": "feed",
    "memberof": "src/cli/vsl.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cli/vsl.js~feed",
    "access": null,
    "export": false,
    "importPath": "vsl/src/cli/vsl.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "code",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "function",
    "name": "exit",
    "memberof": "src/cli/vsl.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cli/vsl.js~exit",
    "access": null,
    "export": false,
    "importPath": "vsl/src/cli/vsl.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 6,
    "kind": "function",
    "name": "help",
    "memberof": "src/cli/vsl.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cli/vsl.js~help",
    "access": null,
    "export": false,
    "importPath": "vsl/src/cli/vsl.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 7,
    "kind": "file",
    "name": "src/vsl/parser/highlight.js",
    "content": "import colors from 'colors';\n\nfunction leftPad (str, len) {\n    var pad = len - str.length, i = \"\";\n    if (pad <= 0) return str;\n    while(pad--) i += \" \";\n    return i + str;\n}\n\n/**\n * Highlights a series of lines & indices as specified by indicator\n * \n * @param {Object} indicators - The result from indicator(code:index:)\n * @param {bool} [highlight=true] - To highlight output with ANSI\n */\nexport default function highlight(indicators, highlight: bool = true) {\n    var lines = indicators.lines, line,\n        start = indicators.startIndex, k = 0,\n        end = start + indicators.relativeEnd,\n        suffix = \" | \",\n        indicator = \"^\",\n        l = indicators.start;\n    \n    if (highlight) {\n        suffix = suffix.red\n        indicator = indicator.red.bold\n    }\n    \n    var maxLen = ((indicators.start + lines.length) + suffix).length;\n        \n    for (var i = 0; i < lines.length; i++) {\n        lines[i] = leftPad(l++ + suffix, maxLen) + lines[i];\n        \n        if (i >= indicators.relativeLine && k < end) {\n            line = lines[i];\n            lines.splice(++i, 0, leftPad(suffix, maxLen));\n            \n            for(let j = 0; j < line.length && k < end; j++, k++) {\n                // if (highlight) lines[i - 1][i] = lines[i - 1][i].bold;\n                \n                if (k >= start) lines[i] += indicator;\n                else lines[i] += \" \";\n            }\n        }\n    }\n    \n    return lines;\n}",
    "static": true,
    "longname": "src/vsl/parser/highlight.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 8,
    "kind": "function",
    "name": "leftPad",
    "memberof": "src/vsl/parser/highlight.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/vsl/parser/highlight.js~leftPad",
    "access": null,
    "export": false,
    "importPath": "vsl/src/vsl/parser/highlight.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "len",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "function",
    "name": "highlight",
    "memberof": "src/vsl/parser/highlight.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/vsl/parser/highlight.js~highlight",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/highlight.js",
    "importStyle": "highlight",
    "description": "Highlights a series of lines & indices as specified by indicator",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "indicators",
        "description": "The result from indicator(code:index:)"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "highlight",
        "description": "To highlight output with ANSI"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "file",
    "name": "src/vsl/parser/indicator.js",
    "content": "/**\n * Highlights a given index range given a code\n *\n * @param {string} code - The specific code which will be used to determine the\n *                        create the index highlight\n * @param {number[]} index - An array in the form of [start, end] which specify\n *                           the indexes to highlight\n * @param {boolean} [highlight=false] - Highlight with ANSI codes the output\n * \n * @return {Object} contains the needed indices and lines\n * @property {string[]} lines the lines to view\n * @property {number} relativeLine the relative index of the starting line\n * @property {number} startIndex the index to start highlighting at\n * @property {number} relativeEnd the relative end to startIndex to end highlight\n */\nexport default function bound (code: string, index: number) {\n    let i = 0,\n        lines = [],\n        lineNumber = 0,\n        previous = '',\n        numberOfBoundingLines = 2,\n        keepCurrentLine = false,\n        line = 0,\n        relativeLine = -1,\n        currentLineIndex = 0,\n        start = 0,\n        startIndex = 0;\n        \n    while (i <= code.length) {\n        if (code[i] === '\\n' || i === code.length) {\n            // If excess lines & k is false (keep)\n            if (lines.length >= numberOfBoundingLines && !keepCurrentLine) {\n                lines.shift();\n                start++;\n            }\n            \n            if (relativeLine < 0 && keepCurrentLine)\n                relativeLine = lines.length;\n            lines.push(previous);\n            \n            lineNumber++;\n            currentLineIndex = i + 1;\n            \n            // Stop if > t\n            if (keepCurrentLine && lineNumber - line > numberOfBoundingLines)\n                break;\n            \n            previous = '';\n        } else {\n            previous += code[i];\n        }\n        \n        if (i === index[0]) {\n            startIndex = i - currentLineIndex;\n            keepCurrentLine = true;\n        }\n        \n        if (i < index[1])\n            line = lineNumber;\n        \n        i++;\n    }\n    \n    return {\n        lines,\n        start,\n        relativeLine,\n        startIndex: startIndex,\n        relativeEnd: index[1] - index[0]\n    };\n}",
    "static": true,
    "longname": "src/vsl/parser/indicator.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 11,
    "kind": "function",
    "name": "bound",
    "memberof": "src/vsl/parser/indicator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/vsl/parser/indicator.js~bound",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/indicator.js",
    "importStyle": "bound",
    "description": "Highlights a given index range given a code",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The specific code which will be used to determine the\n                       create the index highlight"
      },
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "An array in the form of [start, end] which specify\n                          the indexes to highlight"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "highlight",
        "description": "Highlight with ANSI codes the output"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "lines",
        "description": "the lines to view"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeLine",
        "description": "the relative index of the starting line"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "startIndex",
        "description": "the index to start highlighting at"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeEnd",
        "description": "the relative end to startIndex to end highlight"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "contains the needed indices and lines"
    }
  },
  {
    "__docId__": 12,
    "kind": "file",
    "name": "src/vsl/parser/nodes/assignmentStatement.js",
    "content": "import Node from './node';\n\n/**\n * Matches any assignment type.\n * \n * This matches any generic binary expression.\n */\nexport default class AssignmentStatement extends Node {\n    \n    /**\n     * Creates a wrapper ExperssionStatement\n     * \n     * @param {AssignmentType} type The assignment type\n     * @param {TypedIdentifier} identifier The variable's identifier & type\n     * @param {Expression} value The variable's inital value\n     * @param {Object} position a position from nearley\n     */\n    constructor (type: AssignmentType, identifier: TypedIdentifier, value: Expression, position: Object) {\n        super(position);\n        \n        /** @type {AssignmentType} */\n        this.type = type;\n        /** @type {TypedIdentifier} */\n        this.identifier = identifier;\n        /** @type {Expression} */\n        this.value = value;\n    }\n    \n    /** @override */\n    get identifierPath() {\n        return this.identifier;\n    }\n    \n    /** @override */\n    get children() {\n        return ['lhs', 'rhs'];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/assignmentStatement.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 13,
    "kind": "class",
    "name": "AssignmentStatement",
    "memberof": "src/vsl/parser/nodes/assignmentStatement.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/assignmentStatement.js~AssignmentStatement",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/assignmentStatement.js",
    "importStyle": "AssignmentStatement",
    "description": "Matches any assignment type.\n\nThis matches any generic binary expression.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 14,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/assignmentStatement.js~AssignmentStatement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/assignmentStatement.js~AssignmentStatement#constructor",
    "access": null,
    "description": "Creates a wrapper ExperssionStatement",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "AssignmentType"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The assignment type"
      },
      {
        "nullable": null,
        "types": [
          "TypedIdentifier"
        ],
        "spread": false,
        "optional": false,
        "name": "identifier",
        "description": "The variable's identifier & type"
      },
      {
        "nullable": null,
        "types": [
          "Expression"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The variable's inital value"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 15,
    "kind": "member",
    "name": "type",
    "memberof": "src/vsl/parser/nodes/assignmentStatement.js~AssignmentStatement",
    "static": false,
    "longname": "src/vsl/parser/nodes/assignmentStatement.js~AssignmentStatement#type",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "AssignmentType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "name": "identifier",
    "memberof": "src/vsl/parser/nodes/assignmentStatement.js~AssignmentStatement",
    "static": false,
    "longname": "src/vsl/parser/nodes/assignmentStatement.js~AssignmentStatement#identifier",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "TypedIdentifier"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 17,
    "kind": "member",
    "name": "value",
    "memberof": "src/vsl/parser/nodes/assignmentStatement.js~AssignmentStatement",
    "static": false,
    "longname": "src/vsl/parser/nodes/assignmentStatement.js~AssignmentStatement#value",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Expression"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 18,
    "kind": "get",
    "name": "identifierPath",
    "memberof": "src/vsl/parser/nodes/assignmentStatement.js~AssignmentStatement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/assignmentStatement.js~AssignmentStatement#identifierPath",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "type": {
      "types": [
        "*"
      ]
    },
    "override": true
  },
  {
    "__docId__": 19,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/assignmentStatement.js~AssignmentStatement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/assignmentStatement.js~AssignmentStatement#children",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "override": true
  },
  {
    "__docId__": 20,
    "kind": "file",
    "name": "src/vsl/parser/nodes/assignmentType.js",
    "content": "/**\n * Specifies an assignment type\n * @enum {number}\n */\nconst AssignmentType = {\n    Variable: 0,\n    Constant: 1\n};\n\nexport default AssignmentType;",
    "static": true,
    "longname": "src/vsl/parser/nodes/assignmentType.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 21,
    "kind": "variable",
    "name": "AssignmentType",
    "memberof": "src/vsl/parser/nodes/assignmentType.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/assignmentType.js~AssignmentType",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/assignmentType.js",
    "importStyle": "AssignmentType",
    "description": "Specifies an assignment type",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{number}"
      }
    ],
    "type": {
      "types": [
        "{\"Variable\": *, \"Constant\": number}"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "file",
    "name": "src/vsl/parser/nodes/binaryExpression.js",
    "content": "import Node from './node';\n\n/**\n * Matches a binary expression\n * \n * See Also: `UnaryExpression`\n * \n * This matches any generic binary expression.\n */\nexport default class BinaryExpression extends Node {\n    \n    /**\n     * Creates a wrapper ExperssionStatement\n     * \n     * @param {Expression} lhs left-hand side of the expression\n     * @param {Expression} rhs right-hand side of the expression\n     * @param {string} operator the operator for the expression\n     * @param {Object} position a position from nearley\n     */\n    constructor (lhs: Expression, rhs: Expression, operator: string, position: Object) {\n        super(position);\n        \n        /** @type {Expression} */\n        this.lhs = lhs;\n        /** @type {Expression} */\n        this.rhs = rhs;\n        /** @type {string} */\n        this.op = operator;\n    }\n    \n    /** @override */\n    get children() {\n        return ['lhs', 'rhs'];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/binaryExpression.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 23,
    "kind": "class",
    "name": "BinaryExpression",
    "memberof": "src/vsl/parser/nodes/binaryExpression.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/binaryExpression.js~BinaryExpression",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/binaryExpression.js",
    "importStyle": "BinaryExpression",
    "description": "Matches a binary expression\n\nSee Also: `UnaryExpression`\n\nThis matches any generic binary expression.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 24,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/binaryExpression.js~BinaryExpression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/binaryExpression.js~BinaryExpression#constructor",
    "access": null,
    "description": "Creates a wrapper ExperssionStatement",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Expression"
        ],
        "spread": false,
        "optional": false,
        "name": "lhs",
        "description": "left-hand side of the expression"
      },
      {
        "nullable": null,
        "types": [
          "Expression"
        ],
        "spread": false,
        "optional": false,
        "name": "rhs",
        "description": "right-hand side of the expression"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "operator",
        "description": "the operator for the expression"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "lhs",
    "memberof": "src/vsl/parser/nodes/binaryExpression.js~BinaryExpression",
    "static": false,
    "longname": "src/vsl/parser/nodes/binaryExpression.js~BinaryExpression#lhs",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Expression"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "name": "rhs",
    "memberof": "src/vsl/parser/nodes/binaryExpression.js~BinaryExpression",
    "static": false,
    "longname": "src/vsl/parser/nodes/binaryExpression.js~BinaryExpression#rhs",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Expression"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 27,
    "kind": "member",
    "name": "op",
    "memberof": "src/vsl/parser/nodes/binaryExpression.js~BinaryExpression",
    "static": false,
    "longname": "src/vsl/parser/nodes/binaryExpression.js~BinaryExpression#op",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 28,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/binaryExpression.js~BinaryExpression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/binaryExpression.js~BinaryExpression#children",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "override": true
  },
  {
    "__docId__": 29,
    "kind": "file",
    "name": "src/vsl/parser/nodes/classStatement.js",
    "content": "import Node from './node';\n\n/**\n * Wraps a class\n * \n */\nexport default class ClassStatement extends Node {\n    \n    /**\n     * Constructs a generic function statement\n     * \n     * @param {string[]} access - The access modifiers of the node\n     * @param {Identifier[]} superclass - The superclasses to inherit or implement\n     * @param {Node[]} statements - The class's body.\n     * @param {Object} position - a position from nearley\n     */\n    constructor(\n        access: string[],\n        name: Identifier,\n        superclasses: Identifier[],\n        statements: [],\n        position: Object\n    ) {\n        super(position);\n        \n        /** @type {string} */\n        this.access = access;\n        this.name = name;\n        this.superclasses = superclasses;\n        this.statements = statements;\n    }\n    \n    /** @override */\n    get identifierPath() {\n        return this.name;\n    }\n    \n    /** @override */\n    get children() {\n        return ['name', 'superclasses', 'statements'];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/classStatement.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 30,
    "kind": "class",
    "name": "ClassStatement",
    "memberof": "src/vsl/parser/nodes/classStatement.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/classStatement.js~ClassStatement",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/classStatement.js",
    "importStyle": "ClassStatement",
    "description": "Wraps a class",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 31,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/classStatement.js~ClassStatement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/classStatement.js~ClassStatement#constructor",
    "access": null,
    "description": "Constructs a generic function statement",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "access",
        "description": "The access modifiers of the node"
      },
      {
        "nullable": null,
        "types": [
          "Identifier[]"
        ],
        "spread": false,
        "optional": false,
        "name": "superclass",
        "description": "The superclasses to inherit or implement"
      },
      {
        "nullable": null,
        "types": [
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "statements",
        "description": "The class's body."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 32,
    "kind": "member",
    "name": "access",
    "memberof": "src/vsl/parser/nodes/classStatement.js~ClassStatement",
    "static": false,
    "longname": "src/vsl/parser/nodes/classStatement.js~ClassStatement#access",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 33,
    "kind": "member",
    "name": "name",
    "memberof": "src/vsl/parser/nodes/classStatement.js~ClassStatement",
    "static": false,
    "longname": "src/vsl/parser/nodes/classStatement.js~ClassStatement#name",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "member",
    "name": "superclasses",
    "memberof": "src/vsl/parser/nodes/classStatement.js~ClassStatement",
    "static": false,
    "longname": "src/vsl/parser/nodes/classStatement.js~ClassStatement#superclasses",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "member",
    "name": "statements",
    "memberof": "src/vsl/parser/nodes/classStatement.js~ClassStatement",
    "static": false,
    "longname": "src/vsl/parser/nodes/classStatement.js~ClassStatement#statements",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 36,
    "kind": "get",
    "name": "identifierPath",
    "memberof": "src/vsl/parser/nodes/classStatement.js~ClassStatement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/classStatement.js~ClassStatement#identifierPath",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "type": {
      "types": [
        "*"
      ]
    },
    "override": true
  },
  {
    "__docId__": 37,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/classStatement.js~ClassStatement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/classStatement.js~ClassStatement#children",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "override": true
  },
  {
    "__docId__": 38,
    "kind": "file",
    "name": "src/vsl/parser/nodes/codeBlock.js",
    "content": "import Node from './node';\n\n/**\n * Contains a series of statements.\n * \n * This is used by the scope generator to determine where a new scope starts. If\n * this does not fit your needs but you need a scope, subclass this and call the\n * `statements:` field with null\n */\nexport default class CodeBlock extends Node {\n    \n    /**\n     * Creates a scoped series of expressions\n     * \n     * @param {Node[]} statements - the statements\n     * @param {Object} position - a position from nearley\n     */\n    constructor (statements: any[], position: Object) {\n        super(position);\n        \n        /** @type {Expression[]} */\n        this.statements = statements;\n        \n        /**\n         * This is a hashmap describing the child scope and it's variables. It\n         * contains both variable information. This is primarially to be used by\n         * `ScopeTransformer`, and all information in custom transformations\n         * should be accessable through an `ASTTool`\n         * \n         * @type {Map}\n         */\n        this.scope = new Map();\n    }\n    \n    /** @override */\n    get children() {\n        return ['statements'];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/codeBlock.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 39,
    "kind": "class",
    "name": "CodeBlock",
    "memberof": "src/vsl/parser/nodes/codeBlock.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/codeBlock.js~CodeBlock",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/codeBlock.js",
    "importStyle": "CodeBlock",
    "description": "Contains a series of statements.\n\nThis is used by the scope generator to determine where a new scope starts. If\nthis does not fit your needs but you need a scope, subclass this and call the\n`statements:` field with null",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 40,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/codeBlock.js~CodeBlock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/codeBlock.js~CodeBlock#constructor",
    "access": null,
    "description": "Creates a scoped series of expressions",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "statements",
        "description": "the statements"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 41,
    "kind": "member",
    "name": "statements",
    "memberof": "src/vsl/parser/nodes/codeBlock.js~CodeBlock",
    "static": false,
    "longname": "src/vsl/parser/nodes/codeBlock.js~CodeBlock#statements",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Expression[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 42,
    "kind": "member",
    "name": "scope",
    "memberof": "src/vsl/parser/nodes/codeBlock.js~CodeBlock",
    "static": false,
    "longname": "src/vsl/parser/nodes/codeBlock.js~CodeBlock#scope",
    "access": null,
    "description": "This is a hashmap describing the child scope and it's variables. It\ncontains both variable information. This is primarially to be used by\n`ScopeTransformer`, and all information in custom transformations\nshould be accessable through an `ASTTool`",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 43,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/codeBlock.js~CodeBlock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/codeBlock.js~CodeBlock#children",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "override": true
  },
  {
    "__docId__": 44,
    "kind": "file",
    "name": "src/vsl/parser/nodes/commandChain.js",
    "content": "import Node from './node';\n\n/**\n * Matches an expression as a top-level statement\n */\nexport default class CommandChain extends Node {\n    \n    /**\n     * Creates a wrapper ExperssionStatement\n     * \n     * @param {Expression[]} expression the primary expression\n     * @param {Object} position a position from nearley\n     */\n    constructor (expressions: any[], position: Object) {\n        super(position);\n        \n        /** @type {Expression[]} */\n        this.expressions = expressions;\n    }\n    \n    /** @override */\n    get children() {\n        return ['expressions'];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/commandChain.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 45,
    "kind": "class",
    "name": "CommandChain",
    "memberof": "src/vsl/parser/nodes/commandChain.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/commandChain.js~CommandChain",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/commandChain.js",
    "importStyle": "CommandChain",
    "description": "Matches an expression as a top-level statement",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 46,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/commandChain.js~CommandChain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/commandChain.js~CommandChain#constructor",
    "access": null,
    "description": "Creates a wrapper ExperssionStatement",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Expression[]"
        ],
        "spread": false,
        "optional": false,
        "name": "expression",
        "description": "the primary expression"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 47,
    "kind": "member",
    "name": "expressions",
    "memberof": "src/vsl/parser/nodes/commandChain.js~CommandChain",
    "static": false,
    "longname": "src/vsl/parser/nodes/commandChain.js~CommandChain#expressions",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Expression[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 48,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/commandChain.js~CommandChain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/commandChain.js~CommandChain#children",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "override": true
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/vsl/parser/nodes/expressionStatement.js",
    "content": "import Node from './node';\n\n/**\n * Wraps any expression\n * \n * These include:\n *  - PropertyExpression\n *  - BinaryExpression\n *  - UnaryExpression\n * \n * Or even primitive nodes:\n *  - Identifier\n *  - Literal\n * \n * This can be used as a delegate to determine which and how to interpret a\n * given expression. This should be ignored in terms of tree matching\n * \n */\nexport default class ExpressionStatement extends Node {\n    \n    /**\n     * Creates a wrapper ExpressionStatement\n     * \n     * @param {Expression} expression the expression to wrap\n     * @param {Object} position a position from nearley\n     */\n    constructor (expression: any, position: Object) {\n        super(position);\n        \n        /** @type {Expression} */\n        this.expression = expression;\n    }\n    \n    /** @override */\n    get children() {\n        return ['expression'];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/expressionStatement.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "ExpressionStatement",
    "memberof": "src/vsl/parser/nodes/expressionStatement.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/expressionStatement.js~ExpressionStatement",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/expressionStatement.js",
    "importStyle": "ExpressionStatement",
    "description": "Wraps any expression\n\nThese include:\n - PropertyExpression\n - BinaryExpression\n - UnaryExpression\n\nOr even primitive nodes:\n - Identifier\n - Literal\n\nThis can be used as a delegate to determine which and how to interpret a\ngiven expression. This should be ignored in terms of tree matching",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/expressionStatement.js~ExpressionStatement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/expressionStatement.js~ExpressionStatement#constructor",
    "access": null,
    "description": "Creates a wrapper ExpressionStatement",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Expression"
        ],
        "spread": false,
        "optional": false,
        "name": "expression",
        "description": "the expression to wrap"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "expression",
    "memberof": "src/vsl/parser/nodes/expressionStatement.js~ExpressionStatement",
    "static": false,
    "longname": "src/vsl/parser/nodes/expressionStatement.js~ExpressionStatement#expression",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Expression"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/expressionStatement.js~ExpressionStatement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/expressionStatement.js~ExpressionStatement#children",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "override": true
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/vsl/parser/nodes/functionArgument.js",
    "content": "import Node from './node';\n\n/**\n * Represents a function argument\n */\n \nexport default class FunctionArgument extends Node {\n    \n    constructor(typedId: TypedIdentifier, defaultValue: Expression, position: Object) {\n        super(position);\n        \n        /** @type {string} */\n        this.typedId = typedId;\n        this.defaultValue = defaultValue;\n    }\n    \n    /** @override */\n    get children() {\n        return this.defaultValue && ['defaultValue'];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/functionArgument.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "class",
    "name": "FunctionArgument",
    "memberof": "src/vsl/parser/nodes/functionArgument.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/functionArgument.js~FunctionArgument",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/functionArgument.js",
    "importStyle": "FunctionArgument",
    "description": "Represents a function argument",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 56,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/functionArgument.js~FunctionArgument",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/functionArgument.js~FunctionArgument#constructor",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "typedId",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "position",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "typedId",
    "memberof": "src/vsl/parser/nodes/functionArgument.js~FunctionArgument",
    "static": false,
    "longname": "src/vsl/parser/nodes/functionArgument.js~FunctionArgument#typedId",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "defaultValue",
    "memberof": "src/vsl/parser/nodes/functionArgument.js~FunctionArgument",
    "static": false,
    "longname": "src/vsl/parser/nodes/functionArgument.js~FunctionArgument#defaultValue",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/functionArgument.js~FunctionArgument",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/functionArgument.js~FunctionArgument#children",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "type": {
      "types": [
        "*"
      ]
    },
    "override": true
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/vsl/parser/nodes/functionStatement.js",
    "content": "import Node from './node';\n\n/**\n * Wraps a function\n * \n */\nexport default class FunctionStatement extends Node {\n    \n    /**\n     * Constructs a generic function statement\n     * \n     * @param {string[]} access - The access modifiers of the node\n     * @param {Identifier} name - The name of the given function\n     * @param {FunctionArgument[]} args - The arguments of the function\n     * @param {Type} returnType - The function's returnType.\n     * @param {Node[]} statements - The statements in the function body.\n     * @param {Object} position - a position from nearley\n     */\n    constructor(\n        access: string[],\n        name: Identifier,\n        args: FunctionArgument[],\n        returnType: Type,\n        statements: Node[],\n        position: Object\n    ) {\n        super(position);\n        \n        /** @type {string} */\n        this.access = access;\n        this.name = name;\n        this.args = args;\n        this.returnType = returnType;\n        this.statements = statements;\n    }\n    \n    /** @override */\n    get identifierPath() {\n        return this.name;\n    }\n    \n    /** @override */\n    get children() {\n        return ['name', 'args', 'returnType', 'statements'];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/functionStatement.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "class",
    "name": "FunctionStatement",
    "memberof": "src/vsl/parser/nodes/functionStatement.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/functionStatement.js",
    "importStyle": "FunctionStatement",
    "description": "Wraps a function",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 62,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement#constructor",
    "access": null,
    "description": "Constructs a generic function statement",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "access",
        "description": "The access modifiers of the node"
      },
      {
        "nullable": null,
        "types": [
          "Identifier"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the given function"
      },
      {
        "nullable": null,
        "types": [
          "FunctionArgument[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments of the function"
      },
      {
        "nullable": null,
        "types": [
          "Type"
        ],
        "spread": false,
        "optional": false,
        "name": "returnType",
        "description": "The function's returnType."
      },
      {
        "nullable": null,
        "types": [
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "statements",
        "description": "The statements in the function body."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "access",
    "memberof": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement",
    "static": false,
    "longname": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement#access",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "name",
    "memberof": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement",
    "static": false,
    "longname": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement#name",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "args",
    "memberof": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement",
    "static": false,
    "longname": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement#args",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "returnType",
    "memberof": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement",
    "static": false,
    "longname": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement#returnType",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "statements",
    "memberof": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement",
    "static": false,
    "longname": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement#statements",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "get",
    "name": "identifierPath",
    "memberof": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement#identifierPath",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "type": {
      "types": [
        "*"
      ]
    },
    "override": true
  },
  {
    "__docId__": 69,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/functionStatement.js~FunctionStatement#children",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "override": true
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/vsl/parser/nodes/functionizedOperator.js",
    "content": "import Node from './node';\n\n/**\n * Represents a functional operator\n * \n * A functional operator is a shorthand for creating a lambda with a single op.\n * \n * This node represents a functional operator and is created by specifiying the\n * operator type which must be part of the tokenizer and align with a specified\n * operator type. The type the functionalized operator is not needed as is\n * transformed into a lambda recursively and that can be type inferred.\n * \n * @example\n * (==)\n */\n \nexport default class FunctionizedOperator extends Node {\n    \n    /**\n     * Creates a FunctionizedOperator node\n     * \n     * @param {Operator} operator the opreator to functionize\n     * @param {Object} position a position from nearley\n     */\n    constructor (operator: any, position: Object) {\n        super(position);\n        \n        /** @type {string} */\n        this.operator = operator;\n    }\n    \n    /** @override */\n    get children() {\n        return null;\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/functionizedOperator.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "class",
    "name": "FunctionizedOperator",
    "memberof": "src/vsl/parser/nodes/functionizedOperator.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/functionizedOperator.js~FunctionizedOperator",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/functionizedOperator.js",
    "importStyle": "FunctionizedOperator",
    "description": "Represents a functional operator\n\nA functional operator is a shorthand for creating a lambda with a single op.\n\nThis node represents a functional operator and is created by specifiying the\noperator type which must be part of the tokenizer and align with a specified\noperator type. The type the functionalized operator is not needed as is\ntransformed into a lambda recursively and that can be type inferred.",
    "examples": [
      "(==)"
    ],
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 72,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/functionizedOperator.js~FunctionizedOperator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/functionizedOperator.js~FunctionizedOperator#constructor",
    "access": null,
    "description": "Creates a FunctionizedOperator node",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Operator"
        ],
        "spread": false,
        "optional": false,
        "name": "operator",
        "description": "the opreator to functionize"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "operator",
    "memberof": "src/vsl/parser/nodes/functionizedOperator.js~FunctionizedOperator",
    "static": false,
    "longname": "src/vsl/parser/nodes/functionizedOperator.js~FunctionizedOperator#operator",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/functionizedOperator.js~FunctionizedOperator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/functionizedOperator.js~FunctionizedOperator#children",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "type": {
      "types": [
        "*"
      ]
    },
    "override": true
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/vsl/parser/nodes/identifier.js",
    "content": "import Node from './node';\n\n/**\n * Wraps a identifier.\n * \n * Identifiers are specified by the tokenizer but this serves just as a class\n *  which is used for the parser\n * \n */\nexport default class Identifier extends Node {\n    \n    /**\n     * Creates an identifier\n     * \n     * @param {string} identifier the identifier\n     * @param {Object} position a position from nearley\n     */\n    constructor (identifier: string, position: Object) {\n        super(position);\n        \n        /** @type {string} */\n        this.identifier = identifier;\n    }\n    \n    /** @override */\n    get children() {\n        return null;\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/identifier.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "class",
    "name": "Identifier",
    "memberof": "src/vsl/parser/nodes/identifier.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/identifier.js~Identifier",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/identifier.js",
    "importStyle": "Identifier",
    "description": "Wraps a identifier.\n\nIdentifiers are specified by the tokenizer but this serves just as a class\n which is used for the parser",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 77,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/identifier.js~Identifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/identifier.js~Identifier#constructor",
    "access": null,
    "description": "Creates an identifier",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "identifier",
        "description": "the identifier"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "identifier",
    "memberof": "src/vsl/parser/nodes/identifier.js~Identifier",
    "static": false,
    "longname": "src/vsl/parser/nodes/identifier.js~Identifier#identifier",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/identifier.js~Identifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/identifier.js~Identifier#children",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "type": {
      "types": [
        "*"
      ]
    },
    "override": true
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/vsl/parser/nodes/internalMarker.js",
    "content": "import Node from './node';\n\n/**\n * Used to specify that the parent's implementation is internally defined.\n */\nexport default class InternalMarker extends Node {\n    \n    /**\n     * Creates a marker\n     * @param {Object} position - a position from nearley\n     */\n    constructor (position: Object) {\n        super(position);\n    }\n    \n    /** @override */\n    get children() {\n        return null;\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/internalMarker.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "InternalMarker",
    "memberof": "src/vsl/parser/nodes/internalMarker.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/internalMarker.js~InternalMarker",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/internalMarker.js",
    "importStyle": "InternalMarker",
    "description": "Used to specify that the parent's implementation is internally defined.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/internalMarker.js~InternalMarker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/internalMarker.js~InternalMarker#constructor",
    "access": null,
    "description": "Creates a marker",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 83,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/internalMarker.js~InternalMarker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/internalMarker.js~InternalMarker#children",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "type": {
      "types": [
        "*"
      ]
    },
    "override": true
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/vsl/parser/nodes/literal.js",
    "content": "import Node from './node';\n\n/**\n * This matches any simple literal.\n * \n * This excludes more complex literal types such as lambdas and switches.\n * If it can be expressed in a single string this class will wrap it, else\n *  consider a more complex class. \n * \n * The primary classes using this are:\n *  - String\n *  - Number\n *  - Boolean?\n */\nexport default class Literal extends Node {\n    \n    /**\n     * Creates a wrapper for literals\n     * \n     * @param {string} literal - the literal string value of the literal\n     * @param {number} type - The literal type as from a TokenType\n     * @param {Object} position - a position from nearley\n     */\n    constructor (literal: string, type: number, position: Object) {\n        super(position);\n        \n        /** @type {string} */\n        this.literal = literal;\n        \n        /** @type {VSLTokenType} */\n        this.type = type;\n    }\n    \n    /** @override */\n    get children() {\n        return null;\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/literal.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "Literal",
    "memberof": "src/vsl/parser/nodes/literal.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/literal.js~Literal",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/literal.js",
    "importStyle": "Literal",
    "description": "This matches any simple literal.\n\nThis excludes more complex literal types such as lambdas and switches.\nIf it can be expressed in a single string this class will wrap it, else\n consider a more complex class. \n\nThe primary classes using this are:\n - String\n - Number\n - Boolean?",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 86,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/literal.js~Literal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/literal.js~Literal#constructor",
    "access": null,
    "description": "Creates a wrapper for literals",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "literal",
        "description": "the literal string value of the literal"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The literal type as from a TokenType"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "literal",
    "memberof": "src/vsl/parser/nodes/literal.js~Literal",
    "static": false,
    "longname": "src/vsl/parser/nodes/literal.js~Literal#literal",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "type",
    "memberof": "src/vsl/parser/nodes/literal.js~Literal",
    "static": false,
    "longname": "src/vsl/parser/nodes/literal.js~Literal#type",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "VSLTokenType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/literal.js~Literal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/literal.js~Literal#children",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "type": {
      "types": [
        "*"
      ]
    },
    "override": true
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/vsl/parser/nodes/node.js",
    "content": "/**\n * Node class for AST.\n */\nexport default class Node {\n    \n    /**\n     * Creates a new Node object.\n     */\n    constructor(position: Object) {\n        //if (process.env[\"VSL_ENV\"] != \"dev_debug\")\n        //    this.position = position;\n        \n        /**\n         * If exists, references the closest scope. Use an ASTTool to perform\n         * variable lookups\n         * \n         * @type {?CodeBlock}\n         */\n        this.parentScope = null;\n        \n        /**\n         * If exists, a transverser will set this to the parent node or wrapping\n         * container.\n         * \n         * @type {?(Node | Node[])}\n         */\n        this.parentNode = null;\n    }\n    \n    /**\n     * Generates an string representing the AST from a generator.\n     * \n     * The string should use the passed generator to create the outputting\n     * string so padding is correct.\n     * \n     * @abstract\n     * @param {Generator} generator the target generator\n     **/\n     generate(generator: Generator) {\n         throw new TypeError(\"generate(generator:) must be overriden\");\n     }\n    \n    /**\n     * Returns all the children of a node. The order must be consistent\n     * @type {?Node[]}\n     */\n    get children() {\n        throw new Error(\"Must implement Node#children\");\n    }\n    \n    /**\n     * Specifies the field name which declares a variable.\n     * @type {?(Identifier | TypedIdentifier)}\n     */\n    get identifierPath() {\n        return null;\n    }\n    \n    /**\n     * Returns the string representation of the Node.\n     * @param {string} padding String to add to the left of the tree\n     * @return {string} Tree representation of this node.\n     */\n    toAST (padding: String='') {\n        let children = this.children;\n        if (this.unbox)\n            return padding + '\"' + this.children + '\"\\n';\n        let result = '';\n        if (this.type === NodeType.BinaryExpression || this.type === NodeType.UnaryExpression)\n            result = result + padding + operator_names[this.operator_type] + '\\n';\n        else\n            result = result + padding + this.constructor.name + '\\n';\n        if (padding.length >= 3) {\n            let last_chars = padding.slice(-1);\n            if (last_chars === '├')\n                padding = padding.slice(0, -1) + '│';\n            else if (last_chars === '└')\n                padding = padding.slice(0, -1) + ' ';\n        }\n        if (typeof this.children === 'string')\n            result = result + padding + '└\"' + this.children + '\"\\n';\n        else if (this.children.length !== 0) {\n            let new_padding = padding + '├';\n            for (let i = 0; i < this.children.length - 1; i++)\n                result += this.children[i].toAST(new_padding);\n            new_padding = padding + '└';\n            let item = this.children[this.children.length - 1];\n            result += item.toAST(new_padding);\n        }\n        return result;\n    }\n    \n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/node.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "Node",
    "memberof": "src/vsl/parser/nodes/node.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/node.js~Node",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/node.js",
    "importStyle": "Node",
    "description": "Node class for AST.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/node.js~Node#constructor",
    "access": null,
    "description": "Creates a new Node object.",
    "lineNumber": 9,
    "params": [
      {
        "name": "position",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "parentScope",
    "memberof": "src/vsl/parser/nodes/node.js~Node",
    "static": false,
    "longname": "src/vsl/parser/nodes/node.js~Node#parentScope",
    "access": null,
    "description": "If exists, references the closest scope. Use an ASTTool to perform\nvariable lookups",
    "lineNumber": 19,
    "type": {
      "nullable": true,
      "types": [
        "CodeBlock"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "parentNode",
    "memberof": "src/vsl/parser/nodes/node.js~Node",
    "static": false,
    "longname": "src/vsl/parser/nodes/node.js~Node#parentNode",
    "access": null,
    "description": "If exists, a transverser will set this to the parent node or wrapping\ncontainer.",
    "lineNumber": 27,
    "type": {
      "nullable": true,
      "types": [
        "Node ",
        " Node[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "generate",
    "memberof": "src/vsl/parser/nodes/node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/node.js~Node#generate",
    "access": null,
    "description": "Generates an string representing the AST from a generator.\n\nThe string should use the passed generator to create the outputting\nstring so padding is correct.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "Generator"
        ],
        "spread": false,
        "optional": false,
        "name": "generator",
        "description": "the target generator"
      }
    ],
    "abstract": true
  },
  {
    "__docId__": 96,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/node.js~Node#children",
    "access": null,
    "description": "Returns all the children of a node. The order must be consistent",
    "lineNumber": 47,
    "type": {
      "nullable": true,
      "types": [
        "Node[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "get",
    "name": "identifierPath",
    "memberof": "src/vsl/parser/nodes/node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/node.js~Node#identifierPath",
    "access": null,
    "description": "Specifies the field name which declares a variable.",
    "lineNumber": 55,
    "type": {
      "nullable": true,
      "types": [
        "Identifier ",
        " TypedIdentifier"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "toAST",
    "memberof": "src/vsl/parser/nodes/node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/node.js~Node#toAST",
    "access": null,
    "description": "Returns the string representation of the Node.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "padding",
        "description": "String to add to the left of the tree"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Tree representation of this node."
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/vsl/parser/nodes/propertyExpression.js",
    "content": "import Node from './node';\n\n/**\n * Matches a property expression.\n * \n * A property expression is anything in the form `head tail`.\n * \n * A tail can have various markers including:\n *  - accessors through `.`\n *  - subscript `[ ... ]`\n *  - function calls `( ... )`\n *  - etc\n * \n * Make sure you specify tail still if it doesn't exist\n */\nexport default class PropertyExpression extends Node {\n    \n    /**\n     * Creates a wrapper ExperssionStatement\n     * \n     * @param {Expression} expression the primary expression\n     * @param {Object} position a position from nearley\n     */\n    constructor (head: any, tail: any, position: Object) {\n        super(position);\n        \n        /** @type {Expression} */\n        this.head = head;\n        \n        /** @type {Identifier[]|Subscript[]|FunctionCall[]} */\n        this.tail = tail;\n    }\n    \n    /** @override */\n    get children () {\n        return ['head', 'tail'];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/propertyExpression.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "PropertyExpression",
    "memberof": "src/vsl/parser/nodes/propertyExpression.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/propertyExpression.js~PropertyExpression",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/propertyExpression.js",
    "importStyle": "PropertyExpression",
    "description": "Matches a property expression.\n\nA property expression is anything in the form `head tail`.\n\nA tail can have various markers including:\n - accessors through `.`\n - subscript `[ ... ]`\n - function calls `( ... )`\n - etc\n\nMake sure you specify tail still if it doesn't exist",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/propertyExpression.js~PropertyExpression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/propertyExpression.js~PropertyExpression#constructor",
    "access": null,
    "description": "Creates a wrapper ExperssionStatement",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Expression"
        ],
        "spread": false,
        "optional": false,
        "name": "expression",
        "description": "the primary expression"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "head",
    "memberof": "src/vsl/parser/nodes/propertyExpression.js~PropertyExpression",
    "static": false,
    "longname": "src/vsl/parser/nodes/propertyExpression.js~PropertyExpression#head",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Expression"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "tail",
    "memberof": "src/vsl/parser/nodes/propertyExpression.js~PropertyExpression",
    "static": false,
    "longname": "src/vsl/parser/nodes/propertyExpression.js~PropertyExpression#tail",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Identifier[]",
        "Subscript[]",
        "FunctionCall[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/propertyExpression.js~PropertyExpression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/propertyExpression.js~PropertyExpression#children",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "override": true
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/vsl/parser/nodes/subscript.js",
    "content": "import Node from './node';\n\n/**\n * Matches a subscript expression inside a PropertyExpression\n * \n * @example\n * head[tail]\n */\n\nexport default class Subscript extends Node {\n    /**\n     * Creates a subscript\n     * \n     * @param {Expression} expression the provided expression\n     * @param {Object} position a position from nearley\n     */\n    constructor (expression: any, position: Object) {\n        super(position);\n        \n        /** @type {Expression} */\n        this.expression = expression;\n    }\n    \n    /** @override */\n    get children () {\n        return ['expression'];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/subscript.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "class",
    "name": "Subscript",
    "memberof": "src/vsl/parser/nodes/subscript.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/subscript.js~Subscript",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/subscript.js",
    "importStyle": "Subscript",
    "description": "Matches a subscript expression inside a PropertyExpression",
    "examples": [
      "head[tail]"
    ],
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 107,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/subscript.js~Subscript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/subscript.js~Subscript#constructor",
    "access": null,
    "description": "Creates a subscript",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Expression"
        ],
        "spread": false,
        "optional": false,
        "name": "expression",
        "description": "the provided expression"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "expression",
    "memberof": "src/vsl/parser/nodes/subscript.js~Subscript",
    "static": false,
    "longname": "src/vsl/parser/nodes/subscript.js~Subscript#expression",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Expression"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 109,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/subscript.js~Subscript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/subscript.js~Subscript#children",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "override": true
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/vsl/parser/nodes/type.js",
    "content": "import Node from './node';\n\n/**\n * Wraps a type\n * \n */\nexport default class Type extends Node {\n    \n    constructor(\n        path: Identifier[],\n        optional: bool,\n        position: Object\n    ) {\n        super(position);\n        \n        /** @type {string} */\n        this.path = path;\n        this.optional = optional;\n    }\n    \n    /** @override */\n    get children() {\n        return [path[0]];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/type.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "class",
    "name": "Type",
    "memberof": "src/vsl/parser/nodes/type.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/type.js~Type",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/type.js",
    "importStyle": "Type",
    "description": "Wraps a type",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 112,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/type.js~Type",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/type.js~Type#constructor",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "optional",
        "types": [
          "*"
        ]
      },
      {
        "name": "position",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "path",
    "memberof": "src/vsl/parser/nodes/type.js~Type",
    "static": false,
    "longname": "src/vsl/parser/nodes/type.js~Type#path",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "optional",
    "memberof": "src/vsl/parser/nodes/type.js~Type",
    "static": false,
    "longname": "src/vsl/parser/nodes/type.js~Type#optional",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/type.js~Type",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/type.js~Type#children",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "override": true
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/vsl/parser/nodes/typedIdentifier.js",
    "content": "import Node from './node';\n\n/**\n * Wraps a typed identifier.\n * \n */\nexport default class TypedIdentifier extends Node {\n    \n    /**\n     * Creates an identifier\n     * \n     * @param {string} identifier the identifier\n     * @param {Object} position a position from nearley\n     */\n    constructor (identifier: string, type: Type, position: Object) {\n        super(position);\n        \n        /** @type {string} */\n        this.identifier = identifier;\n        this.type = type;\n    }\n    \n    /** @override */\n    get children() {\n        return ['type'];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/typedIdentifier.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "class",
    "name": "TypedIdentifier",
    "memberof": "src/vsl/parser/nodes/typedIdentifier.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/typedIdentifier.js~TypedIdentifier",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/typedIdentifier.js",
    "importStyle": "TypedIdentifier",
    "description": "Wraps a typed identifier.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 118,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/typedIdentifier.js~TypedIdentifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/typedIdentifier.js~TypedIdentifier#constructor",
    "access": null,
    "description": "Creates an identifier",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "identifier",
        "description": "the identifier"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "identifier",
    "memberof": "src/vsl/parser/nodes/typedIdentifier.js~TypedIdentifier",
    "static": false,
    "longname": "src/vsl/parser/nodes/typedIdentifier.js~TypedIdentifier#identifier",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "type",
    "memberof": "src/vsl/parser/nodes/typedIdentifier.js~TypedIdentifier",
    "static": false,
    "longname": "src/vsl/parser/nodes/typedIdentifier.js~TypedIdentifier#type",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/typedIdentifier.js~TypedIdentifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/typedIdentifier.js~TypedIdentifier#children",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "override": true
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/vsl/parser/nodes/unaryExpression.js",
    "content": "import Node from './node';\n\n/**\n * Matches a unary expression\n * \n * See Also: `BinaryExpression`\n * \n * This matches any generic unary expression\n */\nexport default class UnaryExpression extends Node {\n    \n    /**\n     * Creates a wrapper ExperssionStatement\n     * \n     * @param {Expression} expression the expression\n     * @param {string} operator the operator for the expression\n     * @param {Object} position a position from nearley\n     */\n    constructor (expression: any, operator: string, position: Object) {\n        super(position);\n        \n        /** @type {Expression} */\n        this.expression = expression;\n        \n        /** @type {string} */\n        this.op = operator;\n    }\n    \n    /** @override */\n    get children () {\n        return ['expression'];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/nodes/unaryExpression.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "class",
    "name": "UnaryExpression",
    "memberof": "src/vsl/parser/nodes/unaryExpression.js",
    "static": true,
    "longname": "src/vsl/parser/nodes/unaryExpression.js~UnaryExpression",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/nodes/unaryExpression.js",
    "importStyle": "UnaryExpression",
    "description": "Matches a unary expression\n\nSee Also: `BinaryExpression`\n\nThis matches any generic unary expression",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/vsl/parser/nodes/node.js~Node"
    ]
  },
  {
    "__docId__": 124,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/nodes/unaryExpression.js~UnaryExpression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/unaryExpression.js~UnaryExpression#constructor",
    "access": null,
    "description": "Creates a wrapper ExperssionStatement",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Expression"
        ],
        "spread": false,
        "optional": false,
        "name": "expression",
        "description": "the expression"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "operator",
        "description": "the operator for the expression"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "a position from nearley"
      }
    ]
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "expression",
    "memberof": "src/vsl/parser/nodes/unaryExpression.js~UnaryExpression",
    "static": false,
    "longname": "src/vsl/parser/nodes/unaryExpression.js~UnaryExpression#expression",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Expression"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "op",
    "memberof": "src/vsl/parser/nodes/unaryExpression.js~UnaryExpression",
    "static": false,
    "longname": "src/vsl/parser/nodes/unaryExpression.js~UnaryExpression#op",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "get",
    "name": "children",
    "memberof": "src/vsl/parser/nodes/unaryExpression.js~UnaryExpression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/nodes/unaryExpression.js~UnaryExpression#children",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "override": true
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/vsl/parser/nodes.js",
    "content": "import * as Nodes from './nodes';\nexport default Nodes;",
    "static": true,
    "longname": "src/vsl/parser/nodes.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "src/vsl/parser/tokenizer.js",
    "content": "import bound from './indicator';\nimport highlight from './highlight';\n\n/**\n * Tokenizer class.\n */\n//TODO: docs\nexport default class Tokenizer {\n    //TODO: fix type of tokenmatchers in esdoc\n    /**\n     * Creates a new Tokenizer object.\n     * @param {string[]|function(self: Tokenizer)[]} tokenMatchers - An array of\n     *  the escaped string form of a regex matching a token, a function to\n     *  return a token given the matched text, the type of the returned token,\n     *  and the scopes the regex should match in.\n     * @param {number} [scope=0] - Starting scope of the lexer\n     * @param {string[]} [tokenTypes=[]]\n     */\n    constructor (tokenMatchers, scope: number = 0, tokenTypes: string[] = []) {\n        this.tokenMatchers = tokenMatchers.map(tokenMatcher => tokenMatcher.map(object => {\n            object[0] = new RegExp('^' + object[0].replace(/[\\/\\r\\n\\t]/g, match => ('\\\\' + {\n                '/': '/',\n                '\\r': 'r',\n                '\\n': 'n',\n                '\\t': 't'\n            }[match])).replace(/^[a-zA-Z]+$/, '$&(?=$|[^a-zA-Z0-9_])'));\n            return object;\n        }));\n        this.tokenMatcher = tokenMatchers[scope];\n        this.scope = scope;\n        this.variables = {};\n        this.code = '';\n        this.originalCode = '';\n        this.positions = [];\n        this.index = 0;\n        this.line = 0;\n        this.column = 0;\n    }\n    \n    save () {\n        return {\n            index: this.index,\n            line: this.line,\n            column: this.column\n        }\n    }\n    \n    /**\n     * @param {string} code New code.\n     * @param {Info} info Position info for \n     */\n    reset (code: string, info: Object=null) {\n        this.code = code;\n        info = info || {index: 0, line: 0, column: 0};\n        this.index = info.index;\n        this.line = info.line;\n        this.column = info.column;\n    }\n    \n    /**\n     * @return Next token, or undefined if there are no more tokens.\n     */\n    next () {\n        let code = this.code,\n            token = [],\n            success = false;\n        while (1) {\n            if (code.length === 0)\n                return undefined;\n            for (let [regex, onSuccess, type] of this.tokenMatcher) {\n                let match = regex.exec(code);\n                if (match) {\n                    let matched = match[0],\n                        value = onSuccess(this, matched),\n                        length = matched.length;\n                    if (!length)\n                        continue;\n                    this.code = code = code.slice(length);\n                    if (typeof value !== 'undefined') {\n                        this.column += length;\n                        this.index += length;\n                        this.positions.push({\n                            line: this.line,\n                            column: this.column,\n                            index: this.index,\n                            length\n                        });\n                        return typeof type === 'undefined' ? {value} : [value, type];\n                    } else\n                        this.index += length;\n                    success = true;\n                    break;\n                }\n            }\n            if (!success) {\n                this.column++;\n                this.index++;\n                let value = code[0];\n                this.code = code = code.slice(1);\n                this.positions.push({\n                    line: this.line,\n                    column: this.column,\n                    index: this.index,\n                    length: 1\n                });\n                return {value};\n            }\n        }\n    }\n    \n    /**\n     * Tokenizes a given sequence of code\n     * @param {string} code - The desired code chunk or string to tokenize\n     * @return An array of tokens. If the token is of a complex type the format\n     *         [value, TokenType]. Where `TokenType` is a positive integer in the\n     *         enumeration of `TokenType` which represents the type of `value`\n     */\n    tokenize (code: string) {\n        this.reset(code);\n        let result = [],\n            next = null;\n        while ((next = this.next()))\n            result.push(next);\n        return result;\n    }\n    \n    /**\n     * Returns a formatted error message given a token.\n     * \n     * @param {Token} token The token causing the error.\n     */\n    formatError (token: Object) {\n        console.log('token', token);\n        return token;\n    }\n    \n    has (tokenType) {\n        return false;\n        //too slow since lexer will need to return {type: value} instead of array\n        //['integer', 'decimal', 'string', 'identifier'].includes(tokenType);\n    }\n    \n    begin (scope) {\n        this.scope = scope;\n        this.tokenMatcher = this.tokenMatchers[scope];\n    }\n    \n    newline (lines: number=1, column: number=-1) {\n        this.line += lines;\n        this.column = column;\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/tokenizer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "class",
    "name": "Tokenizer",
    "memberof": "src/vsl/parser/tokenizer.js",
    "static": true,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/tokenizer.js",
    "importStyle": "Tokenizer",
    "description": "Tokenizer class.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 131,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#constructor",
    "access": null,
    "description": "Creates a new Tokenizer object.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]",
          "function(self: Tokenizer)[]"
        ],
        "spread": false,
        "optional": false,
        "name": "tokenMatchers",
        "description": "An array of\n the escaped string form of a regex matching a token, a function to\n return a token given the matched text, the type of the returned token,\n and the scopes the regex should match in."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "scope",
        "description": "Starting scope of the lexer"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "tokenTypes",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "tokenMatchers",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#tokenMatchers",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "tokenMatcher",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#tokenMatcher",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "scope",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#scope",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "variables",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#variables",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "code",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#code",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "originalCode",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#originalCode",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "positions",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#positions",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "index",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#index",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "line",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#line",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "column",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#column",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "save",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#save",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "{\"index\": *, \"line\": *, \"column\": *}"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "reset",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#reset",
    "access": null,
    "description": "",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "New code."
      },
      {
        "nullable": null,
        "types": [
          "Info"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "Position info for"
      }
    ]
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "code",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#code",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "index",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#index",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "line",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#line",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "column",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#column",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "next",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#next",
    "access": null,
    "description": "",
    "lineNumber": 63,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Next token, or undefined if there are no more tokens."
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "code",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#code",
    "access": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "column",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#column",
    "access": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "index",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#index",
    "access": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "index",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#index",
    "access": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "code",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#code",
    "access": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "tokenize",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#tokenize",
    "access": null,
    "description": "Tokenizes a given sequence of code",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The desired code chunk or string to tokenize"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "An array of tokens. If the token is of a complex type the format\n        [value, TokenType]. Where `TokenType` is a positive integer in the\n        enumeration of `TokenType` which represents the type of `value`"
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "formatError",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#formatError",
    "access": null,
    "description": "Returns a formatted error message given a token.",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "Token"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "The token causing the error."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "has",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#has",
    "access": null,
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "tokenType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "begin",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#begin",
    "access": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "scope",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "scope",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#scope",
    "access": null,
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "tokenMatcher",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#tokenMatcher",
    "access": null,
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "newline",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#newline",
    "access": null,
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "lines",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      },
      {
        "name": "column",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "line",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#line",
    "access": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "column",
    "memberof": "src/vsl/parser/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "src/vsl/parser/tokenizer.js~Tokenizer#column",
    "access": null,
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/vsl/parser/vslparser.js",
    "content": "import nearley from 'vsl-nearley';\nimport parser from './parser';\n\nimport VSLTokenizer from './vsltokenizer';\n\nexport default class VSLParser {\n    constructor() {\n        this.tokenizer = new VSLTokenizer();\n        this.parser = new nearley.Parser(parser.ParserRules, parser.ParserStart, {lexer: this.tokenizer});\n        this.error = null;\n    }\n    \n    feed(string: string) {\n        let results = this.parser.feed(string);\n        return [results.results[0]];\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/vslparser.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "class",
    "name": "VSLParser",
    "memberof": "src/vsl/parser/vslparser.js",
    "static": true,
    "longname": "src/vsl/parser/vslparser.js~VSLParser",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/vslparser.js",
    "importStyle": "VSLParser",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 165,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/vslparser.js~VSLParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/vslparser.js~VSLParser#constructor",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "tokenizer",
    "memberof": "src/vsl/parser/vslparser.js~VSLParser",
    "static": false,
    "longname": "src/vsl/parser/vslparser.js~VSLParser#tokenizer",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "parser",
    "memberof": "src/vsl/parser/vslparser.js~VSLParser",
    "static": false,
    "longname": "src/vsl/parser/vslparser.js~VSLParser#parser",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "error",
    "memberof": "src/vsl/parser/vslparser.js~VSLParser",
    "static": false,
    "longname": "src/vsl/parser/vslparser.js~VSLParser#error",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "feed",
    "memberof": "src/vsl/parser/vslparser.js~VSLParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/vslparser.js~VSLParser#feed",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "src/vsl/parser/vslscope.js",
    "content": "const VSLScope = Object.freeze({\n    Normal: 0,\n    Comment: 1,\n    MAX: 2\n});\n\nexport default VSLScope;",
    "static": true,
    "longname": "src/vsl/parser/vslscope.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "VSLScope",
    "memberof": "src/vsl/parser/vslscope.js",
    "static": true,
    "longname": "src/vsl/parser/vslscope.js~VSLScope",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/vslscope.js",
    "importStyle": "VSLScope",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/vsl/parser/vsltokenizer.js",
    "content": "import Tokenizer from './tokenizer';\nimport VSLScope from './vslscope';\nimport VSLTokenType from './vsltokentype';\n\nfunction noop () {}\nfunction passThrough (_, match) { return match; }\nfunction strip (character) {\n    return function transform (_, match) {\n        return match.replace(character, '');\n    };\n}\nconst strip_ = strip('_');\nfunction slice (start, end) {\n    return function transform (_, match) {\n        return match.slice(start, end);\n    };\n}\nconst slice1 = slice(1);\nconst removeDelimiters = slice(1, -1);\n\n/**\n * VSL-specific Tokenizer\n * \n * This defines tokens for VSL. For further information see {@link Tokenizer}\n */\nexport default class VSLTokenizer extends Tokenizer {\n    constructor () {\n        let tokenMatchers = Array(VSLScope.MAX);\n        tokenMatchers[VSLScope.Normal] = [\n            ['(?:\\\\s|\\\\\\\\\\\\n)*[\\r\\n](?:\\\\s|\\\\\\\\\\\\n)*', (self, match) => {\n                self.newline(match.match(/(?:\\r|\\n|\\r\\n)/).length, match.match(/[ \\t\\v\\f]*$/)[0].length - 1);\n                return '\\n';\n            }],\n            ['(?:\\\\s|\\\\\\\\\\\\n)+', noop],\n            ['//[^\\r\\n]+', noop],\n            ['/\\\\*', self => {\n                self.variables.commentDepth++;\n                self.begin(VSLScope.Comment);\n            }, null],\n            ['\"(?:\\\\\\\\[\"bfnrt\\\\/\\\\\\\\]|\\\\\\\\u[a-fA-F0-9]{4}|[^\"\\\\\\\\])*\"', removeDelimiters, VSLTokenType.String],\n            [\"'(?:\\\\\\\\['bfnrt\\\\/\\\\\\\\]|\\\\\\\\u[a-fA-F0-9]{4}|[^'\\\\\\\\])*'\", removeDelimiters, VSLTokenType.String],\n            ['\\\\$+[0-9]+', passThrough, VSLTokenType.SpecialArgument],\n            ['\\\\$+_[0-9]+', passThrough, VSLTokenType.SpecialLoop],\n            ['\\\\$[a-zA-Z_][a-zA-Z0-9_]*', slice1, VSLTokenType.SpecialIdentifier],\n            ['\\\\.[0-9_]+', strip_, VSLTokenType.Decimal],\n            ['[0-9][0-9_]*\\\\.[0-9_]+', strip_, VSLTokenType.Decimal],\n            ['(?:[1-5]?[0-9]|6[0-2])b[0-9a-zA-Z_]*', strip_, VSLTokenType.Integer],\n            ['[0-9][0-9_]*', strip_, VSLTokenType.Integer],\n            ['/[^\\/\\*]([^\\\\/\\r\\n]|\\\\[^\\r\\n])+/[gmixc]*', passThrough, VSLTokenType.Regex],\n            ['\\\\.\\\\.\\\\.', passThrough],\n            ['\\\\.\\\\.', passThrough],\n            ['\\\\.', passThrough],\n            [';', passThrough],\n            [':', passThrough],\n            [',', passThrough],\n            ['\\\\+=', passThrough],\n            ['-=', passThrough],\n            ['\\\\*\\\\*=', passThrough],\n            ['\\\\*=', passThrough],\n            ['/=', passThrough],\n            ['%=', passThrough],\n            ['\\\\+', passThrough],\n            ['-', passThrough],\n            ['/', passThrough],\n            ['%', passThrough],\n            ['\\\\*\\\\*', passThrough],\n            ['\\\\*', passThrough],\n            ['<<=', passThrough],\n            ['>>=', passThrough],\n            ['<<', passThrough],\n            ['>>', passThrough],\n            ['==', passThrough],\n            ['!=', passThrough],\n            ['<>', passThrough],\n            ['<=>', passThrough],\n            ['<=', passThrough],\n            ['>=', passThrough],\n            ['<', passThrough],\n            ['>', passThrough],\n            ['=', passThrough],\n            [':=', passThrough],\n            ['&=', passThrough],\n            ['|=', passThrough],\n            ['^=', passThrough],\n            ['&&', passThrough],\n            ['||', passThrough],\n            ['!', passThrough],\n            ['&', passThrough],\n            ['|', passThrough],\n            ['~', passThrough],\n            ['^', passThrough],\n            ['\\\\?', passThrough],\n            ['and', passThrough],\n            ['or', passThrough],\n            ['not', passThrough],\n            ['xor', passThrough],\n            ['::', passThrough],\n            ['->', passThrough],\n            [':>', passThrough],\n            ['{', passThrough],\n            ['}', passThrough],\n            ['\\\\(', passThrough],\n            ['\\\\)', passThrough],\n            ['\\\\[', passThrough],\n            ['\\\\]', passThrough],\n            ['=>', passThrough],\n            \n            ['var', passThrough],\n            ['let', passThrough],\n            ['final', passThrough],\n            ['const', passThrough],\n\n            ['public', passThrough],\n            ['private', passThrough],\n            ['readonly', passThrough],\n            ['internal', passThrough],\n\n            ['inline', passThrough],\n            \n            ['is', passThrough],\n            \n            ['func', passThrough],\n            ['fn', passThrough],\n            ['class', passThrough],\n            ['struct', passThrough],\n            ['interface', passThrough],\n            ['enumeration', passThrough],\n            ['enum', passThrough],\n            \n            ['if', passThrough],\n            ['for', passThrough],\n            ['while', passThrough],\n            \n            ['[a-zA-Z_][a-zA-Z0-9_]*', passThrough, VSLTokenType.Identifier]\n        ];\n        tokenMatchers[VSLScope.Comment] = [\n            ['/\\\\*', self => {\n                self.variables.commentDepth++;\n                self.begin(VSLScope.Comment);\n            }],\n            ['(?:[^/*]|\\\\*[^/]|/[^*])+', noop],\n            ['\\\\*/', self => {\n                self.variables.commentDepth--;\n                if (!self.variables.commentDepth)\n                    self.begin(VSLScope.Normal);\n            }]\n        ];\n        super(tokenMatchers, VSLScope.Normal);\n        this.variables = {\n            commentDepth: 0\n        };\n    }\n}",
    "static": true,
    "longname": "src/vsl/parser/vsltokenizer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "noop",
    "memberof": "src/vsl/parser/vsltokenizer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/vsl/parser/vsltokenizer.js~noop",
    "access": null,
    "export": false,
    "importPath": "vsl/src/vsl/parser/vsltokenizer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "passThrough",
    "memberof": "src/vsl/parser/vsltokenizer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/vsl/parser/vsltokenizer.js~passThrough",
    "access": null,
    "export": false,
    "importPath": "vsl/src/vsl/parser/vsltokenizer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "_",
        "types": [
          "*"
        ]
      },
      {
        "name": "match",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "strip",
    "memberof": "src/vsl/parser/vsltokenizer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/vsl/parser/vsltokenizer.js~strip",
    "access": null,
    "export": false,
    "importPath": "vsl/src/vsl/parser/vsltokenizer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "name": "strip_",
    "memberof": "src/vsl/parser/vsltokenizer.js",
    "static": true,
    "longname": "src/vsl/parser/vsltokenizer.js~strip_",
    "access": null,
    "export": false,
    "importPath": "vsl/src/vsl/parser/vsltokenizer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "slice",
    "memberof": "src/vsl/parser/vsltokenizer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/vsl/parser/vsltokenizer.js~slice",
    "access": null,
    "export": false,
    "importPath": "vsl/src/vsl/parser/vsltokenizer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "slice1",
    "memberof": "src/vsl/parser/vsltokenizer.js",
    "static": true,
    "longname": "src/vsl/parser/vsltokenizer.js~slice1",
    "access": null,
    "export": false,
    "importPath": "vsl/src/vsl/parser/vsltokenizer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "removeDelimiters",
    "memberof": "src/vsl/parser/vsltokenizer.js",
    "static": true,
    "longname": "src/vsl/parser/vsltokenizer.js~removeDelimiters",
    "access": null,
    "export": false,
    "importPath": "vsl/src/vsl/parser/vsltokenizer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "class",
    "name": "VSLTokenizer",
    "memberof": "src/vsl/parser/vsltokenizer.js",
    "static": true,
    "longname": "src/vsl/parser/vsltokenizer.js~VSLTokenizer",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/vsltokenizer.js",
    "importStyle": "VSLTokenizer",
    "description": "VSL-specific Tokenizer\n\nThis defines tokens for VSL. For further information see {@link Tokenizer}",
    "lineNumber": 28,
    "interface": false,
    "extends": [
      "src/vsl/parser/tokenizer.js~Tokenizer"
    ]
  },
  {
    "__docId__": 181,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/parser/vsltokenizer.js~VSLTokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/parser/vsltokenizer.js~VSLTokenizer#constructor",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "variables",
    "memberof": "src/vsl/parser/vsltokenizer.js~VSLTokenizer",
    "static": false,
    "longname": "src/vsl/parser/vsltokenizer.js~VSLTokenizer#variables",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"commentDepth\": *}"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "src/vsl/parser/vsltokentype.js",
    "content": "const VSLTokenType = Object.freeze({\n    Integer: 0,\n    Decimal: 1,\n    String: 2,\n    Regex: 3,\n    SpecialArgument: 4,\n    SpecialLoop: 5,\n    SpecialIdentifier: 6,\n    Identifier: 7\n}); \n\nexport default VSLTokenType;",
    "static": true,
    "longname": "src/vsl/parser/vsltokentype.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "VSLTokenType",
    "memberof": "src/vsl/parser/vsltokentype.js",
    "static": true,
    "longname": "src/vsl/parser/vsltokentype.js~VSLTokenType",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/parser/vsltokentype.js",
    "importStyle": "VSLTokenType",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/vsl/transform/asttool.js",
    "content": "/**\n * Passed to Transformations to aid in transversing and modifying the AST\n * \n * This should really only be generated by a Transformer unless you know what\n * you're doing.\n * \n * This offers a range of functions to help in modifying an AST fragment. This\n * is offered to all transformations by a `Transformer` object and will provide\n * primarially the modification ability along with other common tasks. This\n * serves as an interface between the AST and a transformation.\n * \n * This provides the necessary abstraction needed in order to prevent accidental\n * mutations and verify that the AST is indeed being properly transversed.\n */\nexport default class ASTTool {\n    /**\n     * Creates an ASTTool based on a fragment\n     * \n     * If you aren't working with `Transformer` itself, you can ignore this and\n     *  just read the function docs.\n     * \n     * @param {Node|Node[]} parent - The parent node or array\n     * @param {name} - The key `fragment` represents within it's parent. If the\n     *     `parent` is an array, then this should be a referencing integer.\n     * \n     * @private\n     */\n    constructor(parent: Node | Node[], name: any) {\n        /** @private */\n        this.parent = parent;\n        \n        /** @private */\n        this.name = name;\n\n        /** @private */\n        this.replacement = null;\n    }\n    \n    /**\n     * Access the nth parent. This transverses up the AST tree and if the parent\n     * could not be found, or another error occurs, this returns nil.\n     */\n    nthParent(n: number) {\n        n = n | 0;\n        let parent = this.parent[this.name];\n        while (n > 0 && (parent = parent.parentNode)) n--;\n        return parent;\n    }\n    \n    /**\n     * Replaces the fragment with a new node.\n     * \n     * ### Overview\n     * Use this method to replace the given node.\n     * \n     * ### Notes\n     * Ensure that the resulting node is of a correct type as no checks are done\n     * as of this time.\n     * \n     * @param {Node} with - the replacement node\n     */\n    replace(node: Node) {\n        node.parentScope = this.parent[this.name].parentScope;\n        nose.parentNode = this.parent;\n        this.parent[this.name] = node;\n    }\n}",
    "static": true,
    "longname": "src/vsl/transform/asttool.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "class",
    "name": "ASTTool",
    "memberof": "src/vsl/transform/asttool.js",
    "static": true,
    "longname": "src/vsl/transform/asttool.js~ASTTool",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/transform/asttool.js",
    "importStyle": "ASTTool",
    "description": "Passed to Transformations to aid in transversing and modifying the AST\n\nThis should really only be generated by a Transformer unless you know what\nyou're doing.\n\nThis offers a range of functions to help in modifying an AST fragment. This\nis offered to all transformations by a `Transformer` object and will provide\nprimarially the modification ability along with other common tasks. This\nserves as an interface between the AST and a transformation.\n\nThis provides the necessary abstraction needed in order to prevent accidental\nmutations and verify that the AST is indeed being properly transversed.",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 187,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/transform/asttool.js~ASTTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/asttool.js~ASTTool#constructor",
    "access": "private",
    "description": "Creates an ASTTool based on a fragment\n\nIf you aren't working with `Transformer` itself, you can ignore this and\n just read the function docs.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node",
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": "The parent node or array"
      },
      {
        "nullable": null,
        "types": [
          "name"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "The key `fragment` represents within it's parent. If the\n    `parent` is an array, then this should be a referencing integer."
      }
    ]
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "parent",
    "memberof": "src/vsl/transform/asttool.js~ASTTool",
    "static": false,
    "longname": "src/vsl/transform/asttool.js~ASTTool#parent",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "name",
    "memberof": "src/vsl/transform/asttool.js~ASTTool",
    "static": false,
    "longname": "src/vsl/transform/asttool.js~ASTTool#name",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "replacement",
    "memberof": "src/vsl/transform/asttool.js~ASTTool",
    "static": false,
    "longname": "src/vsl/transform/asttool.js~ASTTool#replacement",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "nthParent",
    "memberof": "src/vsl/transform/asttool.js~ASTTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/asttool.js~ASTTool#nthParent",
    "access": null,
    "description": "Access the nth parent. This transverses up the AST tree and if the parent\ncould not be found, or another error occurs, this returns nil.",
    "lineNumber": 43,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "replace",
    "memberof": "src/vsl/transform/asttool.js~ASTTool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/asttool.js~ASTTool#replace",
    "access": null,
    "description": "Replaces the fragment with a new node.\n\n### Overview\nUse this method to replace the given node.\n\n### Notes\nEnsure that the resulting node is of a correct type as no checks are done\nas of this time.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "with",
        "description": "the replacement node"
      }
    ]
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "src/vsl/transform/data/accessModifiers.js",
    "content": "export default {\n    Scope: [\"public\", \"private\", \"readonly\"],\n    Membership: [\"static\"]\n};",
    "static": true,
    "longname": "src/vsl/transform/data/accessModifiers.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/vsl/transform/passes/FoldBinaryIntegerExpression.js",
    "content": "import Transformation from '../transformation';\nimport TokenType from '../../parser/vsltokentype';\nimport t from '../../parser/nodes';\n\n/** @private */\nconst MAX_SAFE_LEN = Number.MAX_SAFE_INTEGER.toString().length - 1;\n\n/** @private */\nfunction isSafeInteger(node: Node): bool {\n    return node instanceof t.Literal && node.type === TokenType.Integer &&\n        node.literal.length <= MAX_SAFE_LEN;\n}\n\n/**\n * Transforms any binary expressions with raw `VSLNodeType.Integer`s ({@link VSLNodeType})\n * \n * Note: This won't apply for complex intger types as those wouldn't be the same\n * AST node as {@link Literal} only applies to simple literals.\n * \n * This will transform integers within the bounds of a private `MAX_SAFE_LEN` which\n * is 15 on most platforms, set to: `Number.MAX_SAFE_INTEGER.toString().length - 1`.\n * A number is checked on whether it's string length exceedes this range. Due to \n * integer promotion, it is not exactly safe to rely on the bounded Integer type\n * and therefore string types are used.\n * \n * Not all operations are supported as some operations may product output which\n * is larger than the applicable computation boundry as to avoid overflow or loss\n * of precision.\n * \n * This supports the operators:\n *  - `+`\n *  - `-`\n *  - `*`\n *  - `/`\n *  - `%`\n *  - `&`\n *  - `|`\n *  - `^`\n *  - `>>`\n *  - `<<`\n * \n * @example\n * BinaryExpression {\n *   lhs: Literal { literal: \"1\", type: Integer }, \n *   rhs: Literal { literal: \"1\", type: Integer },\n *   op: \"+\"\n * }\n * \n * =>\n * \n * Literal { literal: \"2\", type: Integer }\n */\nexport default class FoldBinaryIntegerExpression extends Transformation {\n    constructor() {\n        super(t.BinaryExpression, \"Optimize::FoldBinaryIntegerExpression\");\n    }\n    \n    modify(node: Node, tool: ASTTool) {\n        if (isSafeInteger(node.lhs) && isSafeInteger(node.rhs)) {\n            let replacement = null,\n                lhs = +node.lhs.literal,\n                rhs = +node.rhs.literal;\n            \n            switch (node.op.value) {\n                case \"+\": replacement = lhs + rhs; break;\n                case \"-\": replacement = lhs - rhs; break;\n                case \"*\": replacement = lhs * rhs; break;\n                case \"/\": replacement = lhs / rhs; break;\n                case \"%\": replacement = lhs % rhs; break;\n                \n                case \"&\": replacement = lhs & rhs; break;\n                case \"|\": replacement = lhs | rhs; break;\n                case \"^\": replacement = lhs ^ rhs; break;\n                \n                case \">>\": replacement = lhs >> rhs; break;\n                case \"<<\": replacement = lhs << rhs; break;\n            }\n            \n            if (replacement != null) {\n                tool.replace(new t.Literal(\n                    replacement.toString(),\n                    TokenType.Integer,\n                    node.position\n                ));\n            }\n        }\n    }\n}",
    "static": true,
    "longname": "src/vsl/transform/passes/FoldBinaryIntegerExpression.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "name": "MAX_SAFE_LEN",
    "memberof": "src/vsl/transform/passes/FoldBinaryIntegerExpression.js",
    "static": true,
    "longname": "src/vsl/transform/passes/FoldBinaryIntegerExpression.js~MAX_SAFE_LEN",
    "access": "private",
    "export": false,
    "importPath": "vsl/src/vsl/transform/passes/FoldBinaryIntegerExpression.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "isSafeInteger",
    "memberof": "src/vsl/transform/passes/FoldBinaryIntegerExpression.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/vsl/transform/passes/FoldBinaryIntegerExpression.js~isSafeInteger",
    "access": "private",
    "export": false,
    "importPath": "vsl/src/vsl/transform/passes/FoldBinaryIntegerExpression.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "FoldBinaryIntegerExpression",
    "memberof": "src/vsl/transform/passes/FoldBinaryIntegerExpression.js",
    "static": true,
    "longname": "src/vsl/transform/passes/FoldBinaryIntegerExpression.js~FoldBinaryIntegerExpression",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/transform/passes/FoldBinaryIntegerExpression.js",
    "importStyle": "FoldBinaryIntegerExpression",
    "description": "Transforms any binary expressions with raw `VSLNodeType.Integer`s ({@link VSLNodeType})\n\nNote: This won't apply for complex intger types as those wouldn't be the same\nAST node as {@link Literal} only applies to simple literals.\n\nThis will transform integers within the bounds of a private `MAX_SAFE_LEN` which\nis 15 on most platforms, set to: `Number.MAX_SAFE_INTEGER.toString().length - 1`.\nA number is checked on whether it's string length exceedes this range. Due to \ninteger promotion, it is not exactly safe to rely on the bounded Integer type\nand therefore string types are used.\n\nNot all operations are supported as some operations may product output which\nis larger than the applicable computation boundry as to avoid overflow or loss\nof precision.\n\nThis supports the operators:\n - `+`\n - `-`\n - `*`\n - `/`\n - `%`\n - `&`\n - `|`\n - `^`\n - `>>`\n - `<<`",
    "examples": [
      "BinaryExpression {\n  lhs: Literal { literal: \"1\", type: Integer }, \n  rhs: Literal { literal: \"1\", type: Integer },\n  op: \"+\"\n}\n\n=>\n\nLiteral { literal: \"2\", type: Integer }"
    ],
    "lineNumber": 52,
    "interface": false,
    "extends": [
      "src/vsl/transform/transformation.js~Transformation"
    ]
  },
  {
    "__docId__": 198,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/transform/passes/FoldBinaryIntegerExpression.js~FoldBinaryIntegerExpression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/passes/FoldBinaryIntegerExpression.js~FoldBinaryIntegerExpression#constructor",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "modify",
    "memberof": "src/vsl/transform/passes/FoldBinaryIntegerExpression.js~FoldBinaryIntegerExpression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/passes/FoldBinaryIntegerExpression.js~FoldBinaryIntegerExpression#modify",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "tool",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "src/vsl/transform/passes/FoldFiniteIntegerRange.js",
    "content": "import Transformation from '../transformation.js';\nimport TokenType from '../../parser/vsltokentype';\nimport t from '../../parser/nodes';\n\n/** @private */\nconst MAX_SAFE_LEN = Number.MAX_SAFE_INTEGER.toString().length - 1;\n\n/** @private */\nfunction isSafeInteger(node: Node): bool {\n    return node instanceof t.Literal && node.type === TokenType.Integer &&\n        node.literal.length <= MAX_SAFE_LEN;\n}\n\n/**\n * Transforms any finite with raw `VSLNodeType.Integer`s ({@link VSLNodeType})\n * \n * Note: This won't apply for complex intger types as those wouldn't be the same\n * AST node as {@link Literal} only applies to simple literals.\n * \n * This will transform integers within the bounds of a private `MAX_SAFE_LEN` which\n * is 15 on most platforms, set to: `Number.MAX_SAFE_INTEGER.toString().length - 1`.\n * A number is checked on whether it's string length exceedes this range. Due to \n * integer promotion, it is not exactly safe to rely on the bounded Integer type\n * and therefore string types are used.\n * \n * @example\n * BinaryExpression {\n *   lhs: Literal { literal: \"1\", type: Integer }, \n *   rhs: Literal { literal: \"3\", type: Integer },\n *   op: \"...\"\n * }\n * \n * =>\n * \n * ArrayLiteral {\n *   data: [\n *     Literal { literal: \"1\", type: Integer },\n *     Literal { literal: \"2\", type: Integer },\n *     Literal { literal: \"3\", type: Integer }\n *   ]\n * }\n */\nexport default class FoldFiniteIntegerRange extends Transformation {\n    constructor() {\n        super(t.BinaryExpression, \"Optimize::FoldFiniteIntegerRange\");\n    }\n    \n    modify(node: Node, tool: ASTTool) {\n        \n    }\n}",
    "static": true,
    "longname": "src/vsl/transform/passes/FoldFiniteIntegerRange.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "variable",
    "name": "MAX_SAFE_LEN",
    "memberof": "src/vsl/transform/passes/FoldFiniteIntegerRange.js",
    "static": true,
    "longname": "src/vsl/transform/passes/FoldFiniteIntegerRange.js~MAX_SAFE_LEN",
    "access": "private",
    "export": false,
    "importPath": "vsl/src/vsl/transform/passes/FoldFiniteIntegerRange.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "isSafeInteger",
    "memberof": "src/vsl/transform/passes/FoldFiniteIntegerRange.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/vsl/transform/passes/FoldFiniteIntegerRange.js~isSafeInteger",
    "access": "private",
    "export": false,
    "importPath": "vsl/src/vsl/transform/passes/FoldFiniteIntegerRange.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "class",
    "name": "FoldFiniteIntegerRange",
    "memberof": "src/vsl/transform/passes/FoldFiniteIntegerRange.js",
    "static": true,
    "longname": "src/vsl/transform/passes/FoldFiniteIntegerRange.js~FoldFiniteIntegerRange",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/transform/passes/FoldFiniteIntegerRange.js",
    "importStyle": "FoldFiniteIntegerRange",
    "description": "Transforms any finite with raw `VSLNodeType.Integer`s ({@link VSLNodeType})\n\nNote: This won't apply for complex intger types as those wouldn't be the same\nAST node as {@link Literal} only applies to simple literals.\n\nThis will transform integers within the bounds of a private `MAX_SAFE_LEN` which\nis 15 on most platforms, set to: `Number.MAX_SAFE_INTEGER.toString().length - 1`.\nA number is checked on whether it's string length exceedes this range. Due to \ninteger promotion, it is not exactly safe to rely on the bounded Integer type\nand therefore string types are used.",
    "examples": [
      "BinaryExpression {\n  lhs: Literal { literal: \"1\", type: Integer }, \n  rhs: Literal { literal: \"3\", type: Integer },\n  op: \"...\"\n}\n\n=>\n\nArrayLiteral {\n  data: [\n    Literal { literal: \"1\", type: Integer },\n    Literal { literal: \"2\", type: Integer },\n    Literal { literal: \"3\", type: Integer }\n  ]\n}"
    ],
    "lineNumber": 42,
    "interface": false,
    "extends": [
      "src/vsl/transform/transformation.js~Transformation"
    ]
  },
  {
    "__docId__": 204,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/transform/passes/FoldFiniteIntegerRange.js~FoldFiniteIntegerRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/passes/FoldFiniteIntegerRange.js~FoldFiniteIntegerRange#constructor",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "modify",
    "memberof": "src/vsl/transform/passes/FoldFiniteIntegerRange.js~FoldFiniteIntegerRange",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/passes/FoldFiniteIntegerRange.js~FoldFiniteIntegerRange#modify",
    "access": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "tool",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 206,
    "kind": "file",
    "name": "src/vsl/transform/passes/VerifyFunctionAccessScope.js",
    "content": "import Transformation from '../transformation.js';\nimport TransformError from '../transformError.js';\nimport AccessModifiers from '../data/accessModifiers';\nimport t from '../../parser/nodes';\n\n/**\n * Verifies and determines if a functions access modifiers are valid within its\n * scope.\n * \n * An example is if a function declared `static func` is outside of a function.\n * This does not implement access modifers either but just checks a function's\n * scope\n */\nexport default class VerifyFunctionAccessScope extends Transformation {\n    constructor() {\n        super(t.FunctionStatement, \"Verify::FunctionAccessScope\");\n    }\n    \n    /** @overide */\n    modify(node: Node, tool: ASTTool) {\n        // Statement[] -> CodeBlock -> ClassStatement\n        let classStatement = tool.nthParent(3);\n        let accessModifiers = node.access;\n        \n        if (classStatement instanceof t.ClassStatement) {\n            // A class function\n            \n            return;\n        }\n        \n        if (classStatement === null) {\n            // Top-level function\n            \n            return;\n        }\n        \n        // Nested function\n        if (accessModifiers.length > 0) {\n            throw new TransformError(\"Functions inside scopes may not have any modifiers.\", node);\n        }\n    }\n}",
    "static": true,
    "longname": "src/vsl/transform/passes/VerifyFunctionAccessScope.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "class",
    "name": "VerifyFunctionAccessScope",
    "memberof": "src/vsl/transform/passes/VerifyFunctionAccessScope.js",
    "static": true,
    "longname": "src/vsl/transform/passes/VerifyFunctionAccessScope.js~VerifyFunctionAccessScope",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/transform/passes/VerifyFunctionAccessScope.js",
    "importStyle": "VerifyFunctionAccessScope",
    "description": "Verifies and determines if a functions access modifiers are valid within its\nscope.\n\nAn example is if a function declared `static func` is outside of a function.\nThis does not implement access modifers either but just checks a function's\nscope",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "src/vsl/transform/transformation.js~Transformation"
    ]
  },
  {
    "__docId__": 208,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/transform/passes/VerifyFunctionAccessScope.js~VerifyFunctionAccessScope",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/passes/VerifyFunctionAccessScope.js~VerifyFunctionAccessScope#constructor",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "modify",
    "memberof": "src/vsl/transform/passes/VerifyFunctionAccessScope.js~VerifyFunctionAccessScope",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/passes/VerifyFunctionAccessScope.js~VerifyFunctionAccessScope#modify",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@overide",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "tool",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "src/vsl/transform/scope/id.js",
    "content": "/**\n * Represents all information about a VSL variable or identifier.\n */\nexport default class Id {\n    \n    /**\n     * @param {bool} mutable - Whether the id is a constant\n     * @param {?Type} type - The type of the variable. `nil` specifies the type\n     *     is yet to be deduced\n     * @param {Node} source - The statement source\n     */\n    constructor(mutable: bool, type: ?Type, source: Node) {\n        this.mutable = mutable;\n        this.type = type;\n        this.source = source;\n    }\n}",
    "static": true,
    "longname": "src/vsl/transform/scope/id.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "class",
    "name": "Id",
    "memberof": "src/vsl/transform/scope/id.js",
    "static": true,
    "longname": "src/vsl/transform/scope/id.js~Id",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/transform/scope/id.js",
    "importStyle": "Id",
    "description": "Represents all information about a VSL variable or identifier.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 212,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/transform/scope/id.js~Id",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/scope/id.js~Id#constructor",
    "access": null,
    "description": "",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": false,
        "name": "mutable",
        "description": "Whether the id is a constant"
      },
      {
        "nullable": true,
        "types": [
          "Type"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the variable. `nil` specifies the type\n    is yet to be deduced"
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The statement source"
      }
    ]
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "mutable",
    "memberof": "src/vsl/transform/scope/id.js~Id",
    "static": false,
    "longname": "src/vsl/transform/scope/id.js~Id#mutable",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "type",
    "memberof": "src/vsl/transform/scope/id.js~Id",
    "static": false,
    "longname": "src/vsl/transform/scope/id.js~Id#type",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "source",
    "memberof": "src/vsl/transform/scope/id.js~Id",
    "static": false,
    "longname": "src/vsl/transform/scope/id.js~Id#source",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "src/vsl/transform/scope/type.js",
    "content": "/**\n * Represents all information about a VSL type. This includes:\n * \n *  - Type name\n *  - Declaration node\n *  - other?\n */\nexport default class Type {\n    \n    /**\n     * @param {string} name - The name of the class as a string\n     * @param {Node} source - The statement source\n     */\n    constructor(name: string, source: Node) {\n        this.name = name;\n        this.source = source;\n    }\n}",
    "static": true,
    "longname": "src/vsl/transform/scope/type.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "class",
    "name": "Type",
    "memberof": "src/vsl/transform/scope/type.js",
    "static": true,
    "longname": "src/vsl/transform/scope/type.js~Type",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/transform/scope/type.js",
    "importStyle": "Type",
    "description": "Represents all information about a VSL type. This includes:\n\n - Type name\n - Declaration node\n - other?",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 218,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/transform/scope/type.js~Type",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/scope/type.js~Type#constructor",
    "access": null,
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the class as a string"
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The statement source"
      }
    ]
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "name",
    "memberof": "src/vsl/transform/scope/type.js~Type",
    "static": false,
    "longname": "src/vsl/transform/scope/type.js~Type#name",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "source",
    "memberof": "src/vsl/transform/scope/type.js~Type",
    "static": false,
    "longname": "src/vsl/transform/scope/type.js~Type#source",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "file",
    "name": "src/vsl/transform/transformError.js",
    "content": "/**\n * Use this to specify an error occured within a `Transformation`. This allows\n * you to pass the node so the CLI or others can obtain location data and show\n * exactly where the error occured.\n * \n */\nexport default class TransformError extends Error {\n    constructor(message, node) {\n        super(message);\n        this.name = 'Transform Error';\n        this.node = node;\n    }\n}",
    "static": true,
    "longname": "src/vsl/transform/transformError.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "class",
    "name": "TransformError",
    "memberof": "src/vsl/transform/transformError.js",
    "static": true,
    "longname": "src/vsl/transform/transformError.js~TransformError",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/transform/transformError.js",
    "importStyle": "TransformError",
    "description": "Use this to specify an error occured within a `Transformation`. This allows\nyou to pass the node so the CLI or others can obtain location data and show\nexactly where the error occured.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 223,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/transform/transformError.js~TransformError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transformError.js~TransformError#constructor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "name",
    "memberof": "src/vsl/transform/transformError.js~TransformError",
    "static": false,
    "longname": "src/vsl/transform/transformError.js~TransformError#name",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "node",
    "memberof": "src/vsl/transform/transformError.js~TransformError",
    "static": false,
    "longname": "src/vsl/transform/transformError.js~TransformError#node",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "file",
    "name": "src/vsl/transform/transformation.js",
    "content": "/**\n * A transformation or a pass for a `Transformer`\n * \n * ### Usage\n * \n * Subclass this and pass it to a `Transformer` to apply it to an AST. Each is\n * passed a `ASTTool` object to aid in modifying and transversing the AST. Never\n * use anything but the ASTTool for modification. Additionally do not attempt to\n * use any undocumented methods of `ASTTool`, as.\n * \n * Override:\n *  - The constructor to provide the node type to run the transformation upon\n *     and the transformation's name.\n *  - The `modify(node:tool:)` method of this class.\n * \n * Refer to the {@link ASTTool} reference for further information.\n * \n * ### Information\n * \n * A transformation is loaded into a transformer and it automatically called\n * where applicable. A transformer should not queue or delegate any further\n * nodes to transformation, nor should it attempt to mutate the AST without the\n * use of an ASTTool.\n * \n * ### Timing\n * \n * Each Transformation is individually timed and tracked by a {@link Transformer}. The\n * timing information is obtained through the `transform(ast:parent:)` method for\n * any and all routed transformations. It is available accurate to microsecond\n * precision and should be used for all transformations to ensure the most efficient\n * transformations are occuring.\n * \n * Transformations are recursive any may run on replaced nodes if the transformer\n * deems correct. You may need to specify specifically if your Transformation\n * requests specific queuing priority or transformation status to avoid extra runs\n * and calls.\n * \n * @example\n * import Transformation from '../transformation';\n * import TokenType from '../../parser/vsltokentype';\n * import t from '../../parser/nodes';\n * \n * export default class MyTransformer extends Transformation {\n *     constructor() {\n *          super(t.Expression, \"TransformerType::TransformerName\");\n *     }\n * \n *     modify(node: Node, tool: ASTTool) {\n *         // ... modifications\n *         tool.replace( newNode );\n *     }\n * }\n * \n * @abstract\n */\nexport default class Transformation {\n    /**\n     * Creates a new transformation object\n     * \n     * @param {Class<Node>} type - the node type to match which is subclass of Node\n     * @param {string} name - the name of the transformation object, for debug purposes\n     */\n    constructor(type: Class<Node>, name: any) {\n        /** @type {Class<Node>} */\n        this.type = type;\n        /** @type {string} */\n        this.name = name;\n    }\n    \n    /**\n     * Modifies a given AST fragment with the `tool`.\n     * \n     * This is the primary function which you must implement to create a\n     * transformer. You can specifically specify the node type this executes upon\n     * through specifying the \"type\" field in the `super` call within your\n     * constructor.\n     * \n     * To run upon any time, pass `null` to the constructor. Never pass undefined\n     * to a field unless specifically noted. If you do happen to pass null you\n     * must perform type checking yourself by using `instanceof` with a node type.\n     * \n     * You likely need access to the node classes to check if a node is of a\n     * specific type, you can import this using:\n     * \n     *      import t from '../../parser/nodes';\n     * \n     * This file is automatically updated based on the directory contents at\n     * build-time.\n     * \n     * This methods execution shuold generally be controlled by a `Transformer`\n     * or a seperate parent object to interface with the delegates.\n     * \n     * @param {Node} node - The node being applied on\n     * @param {ASTTool} tool - The ASTTool for modifications\n     * \n     * @abstract\n     */\n    modify(node: Node, tool: ASTTool) {\n        throw new TypeError(\"Must overload Transformation#modify(node, tool)\");\n    }\n}",
    "static": true,
    "longname": "src/vsl/transform/transformation.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 227,
    "kind": "class",
    "name": "Transformation",
    "memberof": "src/vsl/transform/transformation.js",
    "static": true,
    "longname": "src/vsl/transform/transformation.js~Transformation",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/transform/transformation.js",
    "importStyle": "Transformation",
    "description": "A transformation or a pass for a `Transformer`\n\n### Usage\n\nSubclass this and pass it to a `Transformer` to apply it to an AST. Each is\npassed a `ASTTool` object to aid in modifying and transversing the AST. Never\nuse anything but the ASTTool for modification. Additionally do not attempt to\nuse any undocumented methods of `ASTTool`, as.\n\nOverride:\n - The constructor to provide the node type to run the transformation upon\n    and the transformation's name.\n - The `modify(node:tool:)` method of this class.\n\nRefer to the {@link ASTTool} reference for further information.\n\n### Information\n\nA transformation is loaded into a transformer and it automatically called\nwhere applicable. A transformer should not queue or delegate any further\nnodes to transformation, nor should it attempt to mutate the AST without the\nuse of an ASTTool.\n\n### Timing\n\nEach Transformation is individually timed and tracked by a {@link Transformer}. The\ntiming information is obtained through the `transform(ast:parent:)` method for\nany and all routed transformations. It is available accurate to microsecond\nprecision and should be used for all transformations to ensure the most efficient\ntransformations are occuring.\n\nTransformations are recursive any may run on replaced nodes if the transformer\ndeems correct. You may need to specify specifically if your Transformation\nrequests specific queuing priority or transformation status to avoid extra runs\nand calls.",
    "examples": [
      "import Transformation from '../transformation';\nimport TokenType from '../../parser/vsltokentype';\nimport t from '../../parser/nodes';\n\nexport default class MyTransformer extends Transformation {\n    constructor() {\n         super(t.Expression, \"TransformerType::TransformerName\");\n    }\n\n    modify(node: Node, tool: ASTTool) {\n        // ... modifications\n        tool.replace( newNode );\n    }\n}"
    ],
    "lineNumber": 56,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 228,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/transform/transformation.js~Transformation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transformation.js~Transformation#constructor",
    "access": null,
    "description": "Creates a new transformation object",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Class<Node>"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "the node type to match which is subclass of Node"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "the name of the transformation object, for debug purposes"
      }
    ]
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "type",
    "memberof": "src/vsl/transform/transformation.js~Transformation",
    "static": false,
    "longname": "src/vsl/transform/transformation.js~Transformation#type",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "Class<Node>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "name",
    "memberof": "src/vsl/transform/transformation.js~Transformation",
    "static": false,
    "longname": "src/vsl/transform/transformation.js~Transformation#name",
    "access": null,
    "description": null,
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "modify",
    "memberof": "src/vsl/transform/transformation.js~Transformation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transformation.js~Transformation#modify",
    "access": null,
    "description": "Modifies a given AST fragment with the `tool`.\n\nThis is the primary function which you must implement to create a\ntransformer. You can specifically specify the node type this executes upon\nthrough specifying the \"type\" field in the `super` call within your\nconstructor.\n\nTo run upon any time, pass `null` to the constructor. Never pass undefined\nto a field unless specifically noted. If you do happen to pass null you\nmust perform type checking yourself by using `instanceof` with a node type.\n\nYou likely need access to the node classes to check if a node is of a\nspecific type, you can import this using:\n\n     import t from '../../parser/nodes';\n\nThis file is automatically updated based on the directory contents at\nbuild-time.\n\nThis methods execution shuold generally be controlled by a `Transformer`\nor a seperate parent object to interface with the delegates.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node being applied on"
      },
      {
        "nullable": null,
        "types": [
          "ASTTool"
        ],
        "spread": false,
        "optional": false,
        "name": "tool",
        "description": "The ASTTool for modifications"
      }
    ],
    "abstract": true
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "src/vsl/transform/transformer.js",
    "content": "import Transformation from './transformation';\nimport Transverser from './transverser';\nimport ASTTool from './asttool';\nimport Node from '../parser/nodes/node';\n\n/**\n * Takes an AST and transforms it according to a series of transformations\n * \n * This is a generic class, reference VSLTransfomer for a VSL-specific\n * implementation\n * \n * ### Overview\n * This takes a series of \"passes\" which are applied to the AST, each \"pass\"\n *  would return a new AST node which would be replaced (if specified as so).\n * This is now excluded and further matching AST nodes would be applied\n * \n * ### Usage\n * \n * A `Transformer` can be subclassed (see {@link VSLTransformer}) with a no-args\n * providing this class with the applicable transformers. This class can also\n * be directly constructed with the applicable constructors with no difference.\n * A subclass of `Transformer` should not offer any significant interface not\n * specified by `Transformer` as internal structure might rapidly change.\n * \n * Note: If you're in the REPL and want to just load everything. Just run:\n * \n *     var VSLParser = require('./lib/vsl/parser/vslparser.js');\n *     var p = new VSLParser(); var ast = p.feed(\"1 + 1\");\n *     var VSLTransformer = require('./lib/vsl/transform/vsltransformer');\n *     var t = new VSLTransformer();\n * \n * Additionally, it is reccomended to use `Transformer#queue` to initially load\n * the AST.\n * \n * ### Details\n * In practice, each AST Node is treated like a `Node**`, when a node is swapped\n * the other transformers will mutate it if applicable. This prevents infinite \n * recursion at the end, the node will be requeued for processing, it's children\n * will be in turn verified for applicable transformations. This means a node should not rely on transformation order for any reason,\n * transformations may be parallelized and therefore should also not have any\n * side-effects and be thread safe, concurrency may or may not be implemented in\n * any specific way.\n */\nexport default class Transformer extends Transverser {\n    \n    /**\n     * Creates a new Transformer with the given passes\n     * @param {Transformation[]} passes - The given passes to setup\n     */\n    constructor(passes: Transformation[]) {\n        super();\n        \n        /** @private */\n        this.passes = passes;\n        \n        /** @private */\n        this.time = null;\n        \n        /** @private */\n        this.nodeQueue = [];\n    }\n    \n    /**\n     * Queues an AST to be parsed, calls `transform(ast:)` and automatically\n     * handles transformation distribution. Therefore, this is the reccomended\n     * way to automatically setup and queue the inital AST nodes.\n     * \n     * It is reccomended to buffer expressions with `queue(ast:)` and use the transform\n     * status to determine whether a fork of Transformers should be utilized or \n     * to simply continuing to pipe further AST statements into queue. This operation\n     * may or may not be syncronous.\n     * \n     * Avoid directly calling from a {@link Transformation}\n     * \n     * Return value can be extracted by specifying an `.oncompletion` handler.\n     * \n     * @param {any} ast - An AST as outputted by a `Parser`\n     */\n     queue(ast: any) {\n         super.queue(ast);\n     }\n     \n     /** @override */\n     receivedNode(parent: Node | Node[], name: string) {\n         this.appendNodeQueue(parent, name)\n     }\n     \n     /**\n      * Adds item to node queue\n      * @private\n      */\n    appendNodeQueue(parent: Node | Node[], name: string) {\n        this.nodeQueue.push([ parent[name], parent, name ]);\n        this.didUpdateQueue()\n    }\n     \n     /**\n      * Handles the queue items\n      * @private\n      */\n    didUpdateQueue() {\n        var value, node, parent, item;\n        while (value = this.nodeQueue.shift()) {\n            [node, parent, item] = value;\n            let result = this.transform(node, parent, item);\n        }\n    }\n    \n    /**\n     * Transform the AST according to the setup transformer. This is recursively\n     * called and should never be called from within a transformer\n     * \n     * @param {Node} ast - An AST as outputted by a `Parser`\n     * @param {Node|Node[]} parent - The parent node of the given ast\n     * @param {any} name - The reference to the child relative to the parent.\n     * @param {Transformation[]} [passes=this.passes] - Do not specify. Only for internal use\n     * @return A transformed AST with the passes applied\n     * \n     * @example\n     * var AST = new VSLParser().feed(new VSLTokenizer().tokenize(input));\n     * var final = new VSLTransformer(VSLTransformer.default).transform(AST);\n     */\n    transform(ast: any, parent: parent, name: any, passes: Transformation[] = this.passes) {\n        \n        let t = process.hrtime();\n        \n        for (let i = 0; i < passes.length; i++) {\n            let result = this.transform_once(\n                ast,\n                parent,\n                name,\n                passes[i]\n            );\n            \n            if (result === false) {\n                // Requeue with remaining transformations. Excluding current\n                let queuedTransforms = passes.slice(i + 1);\n                if (queuedTransforms.length > 0)\n                    this.transform(parent[name], parent, name, queuedTransforms);\n                break;\n            }\n        }\n        \n    }\n    \n    /**\n     * Transforms with single transformer.\n     * \n     * @return {bool} if node was mutated and should be requeued.\n     * @private\n     */\n    transform_once(ast: Node, parent: Node | Node[], name: any, pass: Transformation) {\n        // Create the tool for modification\n        let astTool = new ASTTool(parent, name);\n        \n        // Setup the transformation\n        let transformation = new pass();\n        let type = transformation.type\n        \n        // Ensure ast is of the correct type\n        // otherwise stop processing the node\n        if (!(type === null || ast instanceof type))\n            return false;\n        \n        // Call transformation\n        transformation.modify(ast, astTool);\n        \n        // Get new node\n        let result = parent[name];\n        \n        return ast === result;\n    }\n}",
    "static": true,
    "longname": "src/vsl/transform/transformer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "class",
    "name": "Transformer",
    "memberof": "src/vsl/transform/transformer.js",
    "static": true,
    "longname": "src/vsl/transform/transformer.js~Transformer",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/transform/transformer.js",
    "importStyle": "Transformer",
    "description": "Takes an AST and transforms it according to a series of transformations\n\nThis is a generic class, reference VSLTransfomer for a VSL-specific\nimplementation\n\n### Overview\nThis takes a series of \"passes\" which are applied to the AST, each \"pass\"\n would return a new AST node which would be replaced (if specified as so).\nThis is now excluded and further matching AST nodes would be applied\n\n### Usage\n\nA `Transformer` can be subclassed (see {@link VSLTransformer}) with a no-args\nproviding this class with the applicable transformers. This class can also\nbe directly constructed with the applicable constructors with no difference.\nA subclass of `Transformer` should not offer any significant interface not\nspecified by `Transformer` as internal structure might rapidly change.\n\nNote: If you're in the REPL and want to just load everything. Just run:\n\n    var VSLParser = require('./lib/vsl/parser/vslparser.js');\n    var p = new VSLParser(); var ast = p.feed(\"1 + 1\");\n    var VSLTransformer = require('./lib/vsl/transform/vsltransformer');\n    var t = new VSLTransformer();\n\nAdditionally, it is reccomended to use `Transformer#queue` to initially load\nthe AST.\n\n### Details\nIn practice, each AST Node is treated like a `Node**`, when a node is swapped\nthe other transformers will mutate it if applicable. This prevents infinite \nrecursion at the end, the node will be requeued for processing, it's children\nwill be in turn verified for applicable transformations. This means a node should not rely on transformation order for any reason,\ntransformations may be parallelized and therefore should also not have any\nside-effects and be thread safe, concurrency may or may not be implemented in\nany specific way.",
    "lineNumber": 44,
    "interface": false,
    "extends": [
      "src/vsl/transform/transverser.js~Transverser"
    ]
  },
  {
    "__docId__": 234,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/transform/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transformer.js~Transformer#constructor",
    "access": null,
    "description": "Creates a new Transformer with the given passes",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Transformation[]"
        ],
        "spread": false,
        "optional": false,
        "name": "passes",
        "description": "The given passes to setup"
      }
    ]
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "passes",
    "memberof": "src/vsl/transform/transformer.js~Transformer",
    "static": false,
    "longname": "src/vsl/transform/transformer.js~Transformer#passes",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "time",
    "memberof": "src/vsl/transform/transformer.js~Transformer",
    "static": false,
    "longname": "src/vsl/transform/transformer.js~Transformer#time",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "nodeQueue",
    "memberof": "src/vsl/transform/transformer.js~Transformer",
    "static": false,
    "longname": "src/vsl/transform/transformer.js~Transformer#nodeQueue",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "queue",
    "memberof": "src/vsl/transform/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transformer.js~Transformer#queue",
    "access": null,
    "description": "Queues an AST to be parsed, calls `transform(ast:)` and automatically\nhandles transformation distribution. Therefore, this is the reccomended\nway to automatically setup and queue the inital AST nodes.\n\nIt is reccomended to buffer expressions with `queue(ast:)` and use the transform\nstatus to determine whether a fork of Transformers should be utilized or \nto simply continuing to pipe further AST statements into queue. This operation\nmay or may not be syncronous.\n\nAvoid directly calling from a {@link Transformation}\n\nReturn value can be extracted by specifying an `.oncompletion` handler.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "An AST as outputted by a `Parser`"
      }
    ]
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "receivedNode",
    "memberof": "src/vsl/transform/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transformer.js~Transformer#receivedNode",
    "access": null,
    "description": null,
    "lineNumber": 84,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "override": true
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "appendNodeQueue",
    "memberof": "src/vsl/transform/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transformer.js~Transformer#appendNodeQueue",
    "access": "private",
    "description": "Adds item to node queue",
    "lineNumber": 92,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "didUpdateQueue",
    "memberof": "src/vsl/transform/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transformer.js~Transformer#didUpdateQueue",
    "access": "private",
    "description": "Handles the queue items",
    "lineNumber": 101,
    "params": []
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "transform",
    "memberof": "src/vsl/transform/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transformer.js~Transformer#transform",
    "access": null,
    "description": "Transform the AST according to the setup transformer. This is recursively\ncalled and should never be called from within a transformer",
    "examples": [
      "var AST = new VSLParser().feed(new VSLTokenizer().tokenize(input));\nvar final = new VSLTransformer(VSLTransformer.default).transform(AST);"
    ],
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "An AST as outputted by a `Parser`"
      },
      {
        "nullable": null,
        "types": [
          "Node",
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": "The parent node of the given ast"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The reference to the child relative to the parent."
      },
      {
        "nullable": null,
        "types": [
          "Transformation[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this.passes",
        "defaultRaw": "this.passes",
        "name": "passes",
        "description": "Do not specify. Only for internal use"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "A transformed AST with the passes applied"
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "transform_once",
    "memberof": "src/vsl/transform/transformer.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transformer.js~Transformer#transform_once",
    "access": "private",
    "description": "Transforms with single transformer.",
    "lineNumber": 145,
    "params": [
      {
        "name": "ast",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "pass",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": "if node was mutated and should be requeued."
    }
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "src/vsl/transform/transformers/scopetransverser.js",
    "content": "import Transverser from '../transverser';\nimport * as Scope from '../scope/';\nimport * as t from '../../parser/nodes/';\n\n/**\n * Handles scoping. This resolved and mangles identifiers. Latter transformers\n * will not have to verify scope or such. This will emit errors if scoping or\n * access errors occur.\n * \n * Each scope is defined by a `t.CodeBlock` node and if a `get Node#identifierPath()`\n * call does not return nil; the returned {@link Identifier} is then taken as the\n * identifier to declare a variable as.\n * \n * See: {@link Transformer}\n */\nexport default class ScopeTransverser extends Transverser {\n    constructor() {\n        super();\n        \n        // This is basically a stack of the current scope.\n        // For a normal app this would look roughy like:\n        // [ STL, Libraries, Global ]\n        // specify STL to provide the base STL info\n        this.scope = [];\n    }\n    \n    /** @override */\n    receivedNode(parent: Node | Node[], name: string) {\n        let node = parent[name];\n        if (node === null) return;\n        \n        // If the parent is a code block, we want to add it to the scope\n        if (node instanceof t.CodeBlock) {\n            this.scope.push(node);\n        }\n        \n        \n        let identifierPath = null;\n        // Handle new identifier declarations\n        if (identifierPath = node.identifierPath) {\n            if (identifierPath instanceof t.TypedIdentifier) {\n                let id = identifierPath.identifier;\n                let name = id.identifier;\n                let type = id.type;\n                \n                // If type key is variable\n                let mutable = node.type === t.AssignmentType.Variable\n                \n                this.scope[this.scope.length - 1].scope.set(\n                    name,\n                    new Scope.Id(\n                        mutable,\n                        type,\n                        node\n                    )\n                );\n                \n            } else {\n                let name = identifierPath.identifier;\n                let result = null;\n                \n                this.scope[this.scope.length - 1].scope.set(\n                    name,\n                    node\n                );\n            }\n        }\n        \n        node.parentScope = this.scope[this.scope.length - 1] || null;\n        \n    }\n}",
    "static": true,
    "longname": "src/vsl/transform/transformers/scopetransverser.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "class",
    "name": "ScopeTransverser",
    "memberof": "src/vsl/transform/transformers/scopetransverser.js",
    "static": true,
    "longname": "src/vsl/transform/transformers/scopetransverser.js~ScopeTransverser",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/transform/transformers/scopetransverser.js",
    "importStyle": "ScopeTransverser",
    "description": "Handles scoping. This resolved and mangles identifiers. Latter transformers\nwill not have to verify scope or such. This will emit errors if scoping or\naccess errors occur.\n\nEach scope is defined by a `t.CodeBlock` node and if a `get Node#identifierPath()`\ncall does not return nil; the returned {@link Identifier} is then taken as the\nidentifier to declare a variable as.\n\nSee: {@link Transformer}",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "src/vsl/transform/transverser.js~Transverser"
    ]
  },
  {
    "__docId__": 246,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/transform/transformers/scopetransverser.js~ScopeTransverser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transformers/scopetransverser.js~ScopeTransverser#constructor",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 247,
    "kind": "member",
    "name": "scope",
    "memberof": "src/vsl/transform/transformers/scopetransverser.js~ScopeTransverser",
    "static": false,
    "longname": "src/vsl/transform/transformers/scopetransverser.js~ScopeTransverser#scope",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "receivedNode",
    "memberof": "src/vsl/transform/transformers/scopetransverser.js~ScopeTransverser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transformers/scopetransverser.js~ScopeTransverser#receivedNode",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "override": true
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "src/vsl/transform/transformers/vsltransformer.js",
    "content": "import Transformer from '../transformer';\nimport * as Transformations from '../passes/';\n\n/**\n * A default transformer initalized to the passes described in `passes/`\n * \n * See: {@link Transformer}\n */\nexport default class VSLTransformer extends Transformer {\n    constructor() {\n        super(Object.values(Transformations));\n    }\n}",
    "static": true,
    "longname": "src/vsl/transform/transformers/vsltransformer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "class",
    "name": "VSLTransformer",
    "memberof": "src/vsl/transform/transformers/vsltransformer.js",
    "static": true,
    "longname": "src/vsl/transform/transformers/vsltransformer.js~VSLTransformer",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/transform/transformers/vsltransformer.js",
    "importStyle": "VSLTransformer",
    "description": "A default transformer initalized to the passes described in `passes/`\n\nSee: {@link Transformer}",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/vsl/transform/transformer.js~Transformer"
    ]
  },
  {
    "__docId__": 251,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/vsl/transform/transformers/vsltransformer.js~VSLTransformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transformers/vsltransformer.js~VSLTransformer#constructor",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "src/vsl/transform/transverser.js",
    "content": "import Node from '../parser/nodes/node';\n\n/**\n * Transverses the AST.\n * \n * @abstract\n */\nexport default class Transverser {\n    \n    /**\n     * Queues an AST to be transversed, this in turn calls the abstract function\n     * `#receivedNode(parent:name:)` which can be used to determine what to do\n     * with the node. The AST is recursed in order.\n     * \n     * @param {any} ast - An AST as outputted by a `Parser`\n     */\n\n    queue(ast: any) {\n        // Recursively add all AST nodes in an array\n         if (ast instanceof Array) {\n            for (let i = 0; i < ast.length; i++) {\n                // If it's a node array. Then we also want to queue itself and queue\n                // the node itself so its children will be added.\n                this.processNode(ast, i);\n                \n                // Requeue the further children\n                this.queue(ast[i], ast);\n            }\n         } else if (ast instanceof Node) {\n             let children = ast.children, name, child;\n             \n             if (children) {\n                for (let i = 0; i < children.length; i++) {\n                    name = children[i]\n                    child = ast[ name ];\n                    \n                    this.processNode(ast, name);\n                    \n                    if (child != null) this.queue(child, ast);\n                }\n             }\n         } else {\n             if (process.env[\"VSL_ENV\"] != \"dev_debug\") console.log(ast);\n             throw new TypeError(`Unexpected AST node: ${ast} of type ${ast.constructor.name}`);\n         }\n    }\n    \n    /**\n     * @private\n     */\n    processNode(parent: any, name: string) {\n        \n        if (process.env.VSL_ENV === \"dev_debug\") {\n            console.log(\"-- Received Node --\");\n            console.log(\"Parent: \", parent);\n            console.log(\"Name: \", name);\n            console.log(\"Node: \", parent[name]);\n            console.log(\"Scope: \", this.scope);\n            console.log(\"\\n\\n\");\n        }\n        \n        let node = parent[name];\n        if (node) node.parentNode = parent;\n        \n        if (node instanceof Node) this.receivedNode(parent, name);\n    }\n    \n    /**\n     * Called everytime the transverser encounters a node\n     * \n     * @param {Node|Node[]} parent - The parent node of the given ast\n     * @param {any} name - The reference to the child relative to the parent.\n     * \n     * @abstract\n     */\n    receivedNode(parent: any, name: string) {\n        throw new TypeError(`${this.constructor.name}: Did not implement required method #receivedNode(parent:name:)`);\n    }\n    \n}",
    "static": true,
    "longname": "src/vsl/transform/transverser.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "class",
    "name": "Transverser",
    "memberof": "src/vsl/transform/transverser.js",
    "static": true,
    "longname": "src/vsl/transform/transverser.js~Transverser",
    "access": null,
    "export": true,
    "importPath": "vsl/src/vsl/transform/transverser.js",
    "importStyle": "Transverser",
    "description": "Transverses the AST.",
    "lineNumber": 8,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "queue",
    "memberof": "src/vsl/transform/transverser.js~Transverser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transverser.js~Transverser#queue",
    "access": null,
    "description": "Queues an AST to be transversed, this in turn calls the abstract function\n`#receivedNode(parent:name:)` which can be used to determine what to do\nwith the node. The AST is recursed in order.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "An AST as outputted by a `Parser`"
      }
    ]
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "processNode",
    "memberof": "src/vsl/transform/transverser.js~Transverser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transverser.js~Transverser#processNode",
    "access": "private",
    "description": "",
    "lineNumber": 53,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "receivedNode",
    "memberof": "src/vsl/transform/transverser.js~Transverser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/vsl/transform/transverser.js~Transverser#receivedNode",
    "access": null,
    "description": "Called everytime the transverser encounters a node",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node",
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": "The parent node of the given ast"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The reference to the child relative to the parent."
      }
    ],
    "abstract": true
  },
  {
    "__docId__": 258,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 259,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 260,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 261,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 262,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 263,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 264,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 265,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 266,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 267,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 268,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 269,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 270,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 271,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 272,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 273,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 274,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 275,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 276,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 277,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 278,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 279,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 280,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 281,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 282,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 283,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 284,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 285,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 286,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 287,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 288,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 289,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 290,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 291,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 292,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 293,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 294,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 295,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 296,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 297,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 298,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 299,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 300,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 301,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 302,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 303,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 304,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 306,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 307,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 308,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 309,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 310,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 311,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 312,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 313,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]