{
  "type": "File",
  "start": 0,
  "end": 3657,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 101,
      "column": 1
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 3657,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 101,
        "column": 1
      }
    },
    "sourceType": "module",
    "body": [
      {
        "type": "ExportDefaultDeclaration",
        "start": 2032,
        "end": 3657,
        "loc": {
          "start": {
            "line": 56,
            "column": 0
          },
          "end": {
            "line": 101,
            "column": 1
          }
        },
        "declaration": {
          "type": "ClassDeclaration",
          "start": 2047,
          "end": 3657,
          "loc": {
            "start": {
              "line": 56,
              "column": 15
            },
            "end": {
              "line": 101,
              "column": 1
            }
          },
          "id": {
            "type": "Identifier",
            "start": 2053,
            "end": 2067,
            "loc": {
              "start": {
                "line": 56,
                "column": 21
              },
              "end": {
                "line": 56,
                "column": 35
              },
              "identifierName": "Transformation"
            },
            "name": "Transformation",
            "leadingComments": null
          },
          "superClass": null,
          "body": {
            "type": "ClassBody",
            "start": 2068,
            "end": 3657,
            "loc": {
              "start": {
                "line": 56,
                "column": 36
              },
              "end": {
                "line": 101,
                "column": 1
              }
            },
            "body": [
              {
                "type": "ClassMethod",
                "start": 2299,
                "end": 2429,
                "loc": {
                  "start": {
                    "line": 63,
                    "column": 2
                  },
                  "end": {
                    "line": 68,
                    "column": 3
                  }
                },
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 2299,
                  "end": 2310,
                  "loc": {
                    "start": {
                      "line": 63,
                      "column": 2
                    },
                    "end": {
                      "line": 63,
                      "column": 13
                    },
                    "identifierName": "constructor"
                  },
                  "name": "constructor",
                  "leadingComments": null
                },
                "static": false,
                "kind": "constructor",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 2311,
                    "end": 2315,
                    "loc": {
                      "start": {
                        "line": 63,
                        "column": 14
                      },
                      "end": {
                        "line": 63,
                        "column": 18
                      },
                      "identifierName": "type"
                    },
                    "name": "type"
                  },
                  {
                    "type": "Identifier",
                    "start": 2317,
                    "end": 2321,
                    "loc": {
                      "start": {
                        "line": 63,
                        "column": 20
                      },
                      "end": {
                        "line": 63,
                        "column": 24
                      },
                      "identifierName": "name"
                    },
                    "name": "name"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 2323,
                  "end": 2429,
                  "loc": {
                    "start": {
                      "line": 63,
                      "column": 26
                    },
                    "end": {
                      "line": 68,
                      "column": 3
                    }
                  },
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "start": 2360,
                      "end": 2377,
                      "loc": {
                        "start": {
                          "line": 65,
                          "column": 4
                        },
                        "end": {
                          "line": 65,
                          "column": 21
                        }
                      },
                      "expression": {
                        "type": "AssignmentExpression",
                        "start": 2360,
                        "end": 2376,
                        "loc": {
                          "start": {
                            "line": 65,
                            "column": 4
                          },
                          "end": {
                            "line": 65,
                            "column": 20
                          }
                        },
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "start": 2360,
                          "end": 2369,
                          "loc": {
                            "start": {
                              "line": 65,
                              "column": 4
                            },
                            "end": {
                              "line": 65,
                              "column": 13
                            }
                          },
                          "object": {
                            "type": "ThisExpression",
                            "start": 2360,
                            "end": 2364,
                            "loc": {
                              "start": {
                                "line": 65,
                                "column": 4
                              },
                              "end": {
                                "line": 65,
                                "column": 8
                              }
                            },
                            "leadingComments": null
                          },
                          "property": {
                            "type": "Identifier",
                            "start": 2365,
                            "end": 2369,
                            "loc": {
                              "start": {
                                "line": 65,
                                "column": 9
                              },
                              "end": {
                                "line": 65,
                                "column": 13
                              },
                              "identifierName": "type"
                            },
                            "name": "type"
                          },
                          "computed": false,
                          "leadingComments": null
                        },
                        "right": {
                          "type": "Identifier",
                          "start": 2372,
                          "end": 2376,
                          "loc": {
                            "start": {
                              "line": 65,
                              "column": 16
                            },
                            "end": {
                              "line": 65,
                              "column": 20
                            },
                            "identifierName": "type"
                          },
                          "name": "type"
                        },
                        "leadingComments": null
                      },
                      "leadingComments": [
                        {
                          "type": "CommentBlock",
                          "value": "* @type {Class<Node>} ",
                          "start": 2329,
                          "end": 2355,
                          "loc": {
                            "start": {
                              "line": 64,
                              "column": 4
                            },
                            "end": {
                              "line": 64,
                              "column": 30
                            }
                          }
                        }
                      ],
                      "trailingComments": [
                        {
                          "type": "CommentBlock",
                          "value": "* @type {string} ",
                          "start": 2382,
                          "end": 2403,
                          "loc": {
                            "start": {
                              "line": 66,
                              "column": 4
                            },
                            "end": {
                              "line": 66,
                              "column": 25
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "ExpressionStatement",
                      "start": 2408,
                      "end": 2425,
                      "loc": {
                        "start": {
                          "line": 67,
                          "column": 4
                        },
                        "end": {
                          "line": 67,
                          "column": 21
                        }
                      },
                      "expression": {
                        "type": "AssignmentExpression",
                        "start": 2408,
                        "end": 2424,
                        "loc": {
                          "start": {
                            "line": 67,
                            "column": 4
                          },
                          "end": {
                            "line": 67,
                            "column": 20
                          }
                        },
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "start": 2408,
                          "end": 2417,
                          "loc": {
                            "start": {
                              "line": 67,
                              "column": 4
                            },
                            "end": {
                              "line": 67,
                              "column": 13
                            }
                          },
                          "object": {
                            "type": "ThisExpression",
                            "start": 2408,
                            "end": 2412,
                            "loc": {
                              "start": {
                                "line": 67,
                                "column": 4
                              },
                              "end": {
                                "line": 67,
                                "column": 8
                              }
                            },
                            "leadingComments": null
                          },
                          "property": {
                            "type": "Identifier",
                            "start": 2413,
                            "end": 2417,
                            "loc": {
                              "start": {
                                "line": 67,
                                "column": 9
                              },
                              "end": {
                                "line": 67,
                                "column": 13
                              },
                              "identifierName": "name"
                            },
                            "name": "name"
                          },
                          "computed": false,
                          "leadingComments": null
                        },
                        "right": {
                          "type": "Identifier",
                          "start": 2420,
                          "end": 2424,
                          "loc": {
                            "start": {
                              "line": 67,
                              "column": 16
                            },
                            "end": {
                              "line": 67,
                              "column": 20
                            },
                            "identifierName": "name"
                          },
                          "name": "name"
                        },
                        "leadingComments": null
                      },
                      "leadingComments": [
                        {
                          "type": "CommentBlock",
                          "value": "* @type {string} ",
                          "start": 2382,
                          "end": 2403,
                          "loc": {
                            "start": {
                              "line": 66,
                              "column": 4
                            },
                            "end": {
                              "line": 66,
                              "column": 25
                            }
                          }
                        }
                      ]
                    }
                  ],
                  "directives": [],
                  "trailingComments": null
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n   * Creates a new transformation object\n   * \n   * @param {Class<Node>} type - the node type to match which is subclass of Node\n   * @param {string} name - the name of the transformation object, for debug purposes\n   ",
                    "start": 2072,
                    "end": 2296,
                    "loc": {
                      "start": {
                        "line": 57,
                        "column": 2
                      },
                      "end": {
                        "line": 62,
                        "column": 5
                      }
                    }
                  }
                ],
                "trailingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n   * Modifies a given AST fragment with the `tool`.\n   * \n   * This is the primary function which you must implement to create a\n   * transformer. You can specifically specify the node type this executes upon\n   * through specifying the \"type\" field in the `super` call within your\n   * constructor.\n   * \n   * To run upon any time, pass `null` to the constructor. Never pass undefined\n   * to a field unless specifically noted. If you do happen to pass null you\n   * must perform type checking yourself by using `instanceof` with a node type.\n   * \n   * You likely need access to the node classes to check if a node is of a\n   * specific type, you can import this using:\n   * \n   *      import t from '../../parser/nodes';\n   * \n   * This file is automatically updated based on the directory contents at\n   * build-time.\n   * \n   * This methods execution shuold generally be controlled by a `Transformer`\n   * or a seperate parent object to interface with the delegates.\n   * \n   * @param {Node} node - The node being applied on\n   * @param {ASTTool} tool - The ASTTool for modifications\n   * \n   * @abstract\n   ",
                    "start": 2433,
                    "end": 3552,
                    "loc": {
                      "start": {
                        "line": 70,
                        "column": 2
                      },
                      "end": {
                        "line": 97,
                        "column": 5
                      }
                    }
                  }
                ]
              },
              {
                "type": "ClassMethod",
                "start": 3555,
                "end": 3655,
                "loc": {
                  "start": {
                    "line": 98,
                    "column": 2
                  },
                  "end": {
                    "line": 100,
                    "column": 3
                  }
                },
                "computed": false,
                "key": {
                  "type": "Identifier",
                  "start": 3555,
                  "end": 3561,
                  "loc": {
                    "start": {
                      "line": 98,
                      "column": 2
                    },
                    "end": {
                      "line": 98,
                      "column": 8
                    },
                    "identifierName": "modify"
                  },
                  "name": "modify",
                  "leadingComments": null
                },
                "static": false,
                "kind": "method",
                "id": null,
                "generator": false,
                "expression": false,
                "async": false,
                "params": [
                  {
                    "type": "Identifier",
                    "start": 3562,
                    "end": 3566,
                    "loc": {
                      "start": {
                        "line": 98,
                        "column": 9
                      },
                      "end": {
                        "line": 98,
                        "column": 13
                      },
                      "identifierName": "node"
                    },
                    "name": "node"
                  },
                  {
                    "type": "Identifier",
                    "start": 3568,
                    "end": 3572,
                    "loc": {
                      "start": {
                        "line": 98,
                        "column": 15
                      },
                      "end": {
                        "line": 98,
                        "column": 19
                      },
                      "identifierName": "tool"
                    },
                    "name": "tool"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "start": 3574,
                  "end": 3655,
                  "loc": {
                    "start": {
                      "line": 98,
                      "column": 21
                    },
                    "end": {
                      "line": 100,
                      "column": 3
                    }
                  },
                  "body": [
                    {
                      "type": "ThrowStatement",
                      "start": 3580,
                      "end": 3651,
                      "loc": {
                        "start": {
                          "line": 99,
                          "column": 4
                        },
                        "end": {
                          "line": 99,
                          "column": 75
                        }
                      },
                      "argument": {
                        "type": "NewExpression",
                        "start": 3586,
                        "end": 3650,
                        "loc": {
                          "start": {
                            "line": 99,
                            "column": 10
                          },
                          "end": {
                            "line": 99,
                            "column": 74
                          }
                        },
                        "callee": {
                          "type": "Identifier",
                          "start": 3590,
                          "end": 3599,
                          "loc": {
                            "start": {
                              "line": 99,
                              "column": 14
                            },
                            "end": {
                              "line": 99,
                              "column": 23
                            },
                            "identifierName": "TypeError"
                          },
                          "name": "TypeError"
                        },
                        "arguments": [
                          {
                            "type": "StringLiteral",
                            "start": 3600,
                            "end": 3649,
                            "loc": {
                              "start": {
                                "line": 99,
                                "column": 24
                              },
                              "end": {
                                "line": 99,
                                "column": 73
                              }
                            },
                            "extra": {
                              "rawValue": "Must overload Transformation#modify(node, tool)",
                              "raw": "\"Must overload Transformation#modify(node, tool)\""
                            },
                            "value": "Must overload Transformation#modify(node, tool)"
                          }
                        ]
                      }
                    }
                  ],
                  "directives": []
                },
                "leadingComments": [
                  {
                    "type": "CommentBlock",
                    "value": "*\n   * Modifies a given AST fragment with the `tool`.\n   * \n   * This is the primary function which you must implement to create a\n   * transformer. You can specifically specify the node type this executes upon\n   * through specifying the \"type\" field in the `super` call within your\n   * constructor.\n   * \n   * To run upon any time, pass `null` to the constructor. Never pass undefined\n   * to a field unless specifically noted. If you do happen to pass null you\n   * must perform type checking yourself by using `instanceof` with a node type.\n   * \n   * You likely need access to the node classes to check if a node is of a\n   * specific type, you can import this using:\n   * \n   *      import t from '../../parser/nodes';\n   * \n   * This file is automatically updated based on the directory contents at\n   * build-time.\n   * \n   * This methods execution shuold generally be controlled by a `Transformer`\n   * or a seperate parent object to interface with the delegates.\n   * \n   * @param {Node} node - The node being applied on\n   * @param {ASTTool} tool - The ASTTool for modifications\n   * \n   * @abstract\n   ",
                    "start": 2433,
                    "end": 3552,
                    "loc": {
                      "start": {
                        "line": 70,
                        "column": 2
                      },
                      "end": {
                        "line": 97,
                        "column": 5
                      }
                    }
                  }
                ]
              }
            ]
          },
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * A transformation or a pass for a `Transformer`\n * \n * ### Usage\n * \n * Subclass this and pass it to a `Transformer` to apply it to an AST. Each is\n * passed a `ASTTool` object to aid in modifying and transversing the AST. Never\n * use anything but the ASTTool for modification. Additionally do not attempt to\n * use any undocumented methods of `ASTTool`, as.\n * \n * Override:\n *  - The constructor to provide the node type to run the transformation upon\n *     and the transformation's name.\n *  - The `modify(node:tool:)` method of this class.\n * \n * Refer to the {@link ASTTool} reference for further information.\n * \n * ### Information\n * \n * A transformation is loaded into a transformer and it automatically called\n * where applicable. A transformer should not queue or delegate any further\n * nodes to transformation, nor should it attempt to mutate the AST without the\n * use of an ASTTool.\n * \n * ### Timing\n * \n * Each Transformation is individually timed and tracked by a {@link Transformer}. The\n * timing information is obtained through the `transform(ast:parent:)` method for\n * any and all routed transformations. It is available accurate to microsecond\n * precision and should be used for all transformations to ensure the most efficient\n * transformations are occuring.\n * \n * Transformations are recursive any may run on replaced nodes if the transformer\n * deems correct. You may need to specify specifically if your Transformation\n * requests specific queuing priority or transformation status to avoid extra runs\n * and calls.\n * \n * @example\n * import Transformation from '../transformation';\n * import TokenType from '../../parser/vsltokentype';\n * import t from '../../parser/nodes';\n * \n * export default class MyTransformer extends Transformation {\n *     constructor() {\n *          super(t.Expression, \"TransformerType::TransformerName\");\n *     }\n * \n *     modify(node: Node, tool: ASTTool) {\n *         // ... modifications\n *         tool.replace( newNode );\n *     }\n * }\n * \n * @abstract\n ",
              "start": 0,
              "end": 2031,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 55,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": []
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * A transformation or a pass for a `Transformer`\n * \n * ### Usage\n * \n * Subclass this and pass it to a `Transformer` to apply it to an AST. Each is\n * passed a `ASTTool` object to aid in modifying and transversing the AST. Never\n * use anything but the ASTTool for modification. Additionally do not attempt to\n * use any undocumented methods of `ASTTool`, as.\n * \n * Override:\n *  - The constructor to provide the node type to run the transformation upon\n *     and the transformation's name.\n *  - The `modify(node:tool:)` method of this class.\n * \n * Refer to the {@link ASTTool} reference for further information.\n * \n * ### Information\n * \n * A transformation is loaded into a transformer and it automatically called\n * where applicable. A transformer should not queue or delegate any further\n * nodes to transformation, nor should it attempt to mutate the AST without the\n * use of an ASTTool.\n * \n * ### Timing\n * \n * Each Transformation is individually timed and tracked by a {@link Transformer}. The\n * timing information is obtained through the `transform(ast:parent:)` method for\n * any and all routed transformations. It is available accurate to microsecond\n * precision and should be used for all transformations to ensure the most efficient\n * transformations are occuring.\n * \n * Transformations are recursive any may run on replaced nodes if the transformer\n * deems correct. You may need to specify specifically if your Transformation\n * requests specific queuing priority or transformation status to avoid extra runs\n * and calls.\n * \n * @example\n * import Transformation from '../transformation';\n * import TokenType from '../../parser/vsltokentype';\n * import t from '../../parser/nodes';\n * \n * export default class MyTransformer extends Transformation {\n *     constructor() {\n *          super(t.Expression, \"TransformerType::TransformerName\");\n *     }\n * \n *     modify(node: Node, tool: ASTTool) {\n *         // ... modifications\n *         tool.replace( newNode );\n *     }\n * }\n * \n * @abstract\n ",
            "start": 0,
            "end": 2031,
            "loc": {
              "start": {
                "line": 1,
                "column": 0
              },
              "end": {
                "line": 55,
                "column": 3
              }
            }
          }
        ]
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\n * A transformation or a pass for a `Transformer`\n * \n * ### Usage\n * \n * Subclass this and pass it to a `Transformer` to apply it to an AST. Each is\n * passed a `ASTTool` object to aid in modifying and transversing the AST. Never\n * use anything but the ASTTool for modification. Additionally do not attempt to\n * use any undocumented methods of `ASTTool`, as.\n * \n * Override:\n *  - The constructor to provide the node type to run the transformation upon\n *     and the transformation's name.\n *  - The `modify(node:tool:)` method of this class.\n * \n * Refer to the {@link ASTTool} reference for further information.\n * \n * ### Information\n * \n * A transformation is loaded into a transformer and it automatically called\n * where applicable. A transformer should not queue or delegate any further\n * nodes to transformation, nor should it attempt to mutate the AST without the\n * use of an ASTTool.\n * \n * ### Timing\n * \n * Each Transformation is individually timed and tracked by a {@link Transformer}. The\n * timing information is obtained through the `transform(ast:parent:)` method for\n * any and all routed transformations. It is available accurate to microsecond\n * precision and should be used for all transformations to ensure the most efficient\n * transformations are occuring.\n * \n * Transformations are recursive any may run on replaced nodes if the transformer\n * deems correct. You may need to specify specifically if your Transformation\n * requests specific queuing priority or transformation status to avoid extra runs\n * and calls.\n * \n * @example\n * import Transformation from '../transformation';\n * import TokenType from '../../parser/vsltokentype';\n * import t from '../../parser/nodes';\n * \n * export default class MyTransformer extends Transformation {\n *     constructor() {\n *          super(t.Expression, \"TransformerType::TransformerName\");\n *     }\n * \n *     modify(node: Node, tool: ASTTool) {\n *         // ... modifications\n *         tool.replace( newNode );\n *     }\n * }\n * \n * @abstract\n ",
      "start": 0,
      "end": 2031,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * Creates a new transformation object\n   * \n   * @param {Class<Node>} type - the node type to match which is subclass of Node\n   * @param {string} name - the name of the transformation object, for debug purposes\n   ",
      "start": 2072,
      "end": 2296,
      "loc": {
        "start": {
          "line": 57,
          "column": 2
        },
        "end": {
          "line": 62,
          "column": 5
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "* @type {Class<Node>} ",
      "start": 2329,
      "end": 2355,
      "loc": {
        "start": {
          "line": 64,
          "column": 4
        },
        "end": {
          "line": 64,
          "column": 30
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "* @type {string} ",
      "start": 2382,
      "end": 2403,
      "loc": {
        "start": {
          "line": 66,
          "column": 4
        },
        "end": {
          "line": 66,
          "column": 25
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * Modifies a given AST fragment with the `tool`.\n   * \n   * This is the primary function which you must implement to create a\n   * transformer. You can specifically specify the node type this executes upon\n   * through specifying the \"type\" field in the `super` call within your\n   * constructor.\n   * \n   * To run upon any time, pass `null` to the constructor. Never pass undefined\n   * to a field unless specifically noted. If you do happen to pass null you\n   * must perform type checking yourself by using `instanceof` with a node type.\n   * \n   * You likely need access to the node classes to check if a node is of a\n   * specific type, you can import this using:\n   * \n   *      import t from '../../parser/nodes';\n   * \n   * This file is automatically updated based on the directory contents at\n   * build-time.\n   * \n   * This methods execution shuold generally be controlled by a `Transformer`\n   * or a seperate parent object to interface with the delegates.\n   * \n   * @param {Node} node - The node being applied on\n   * @param {ASTTool} tool - The ASTTool for modifications\n   * \n   * @abstract\n   ",
      "start": 2433,
      "end": 3552,
      "loc": {
        "start": {
          "line": 70,
          "column": 2
        },
        "end": {
          "line": 97,
          "column": 5
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": "*\n * A transformation or a pass for a `Transformer`\n * \n * ### Usage\n * \n * Subclass this and pass it to a `Transformer` to apply it to an AST. Each is\n * passed a `ASTTool` object to aid in modifying and transversing the AST. Never\n * use anything but the ASTTool for modification. Additionally do not attempt to\n * use any undocumented methods of `ASTTool`, as.\n * \n * Override:\n *  - The constructor to provide the node type to run the transformation upon\n *     and the transformation's name.\n *  - The `modify(node:tool:)` method of this class.\n * \n * Refer to the {@link ASTTool} reference for further information.\n * \n * ### Information\n * \n * A transformation is loaded into a transformer and it automatically called\n * where applicable. A transformer should not queue or delegate any further\n * nodes to transformation, nor should it attempt to mutate the AST without the\n * use of an ASTTool.\n * \n * ### Timing\n * \n * Each Transformation is individually timed and tracked by a {@link Transformer}. The\n * timing information is obtained through the `transform(ast:parent:)` method for\n * any and all routed transformations. It is available accurate to microsecond\n * precision and should be used for all transformations to ensure the most efficient\n * transformations are occuring.\n * \n * Transformations are recursive any may run on replaced nodes if the transformer\n * deems correct. You may need to specify specifically if your Transformation\n * requests specific queuing priority or transformation status to avoid extra runs\n * and calls.\n * \n * @example\n * import Transformation from '../transformation';\n * import TokenType from '../../parser/vsltokentype';\n * import t from '../../parser/nodes';\n * \n * export default class MyTransformer extends Transformation {\n *     constructor() {\n *          super(t.Expression, \"TransformerType::TransformerName\");\n *     }\n * \n *     modify(node: Node, tool: ASTTool) {\n *         // ... modifications\n *         tool.replace( newNode );\n *     }\n * }\n * \n * @abstract\n ",
      "start": 0,
      "end": 2031,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 2032,
      "end": 2038,
      "loc": {
        "start": {
          "line": 56,
          "column": 0
        },
        "end": {
          "line": 56,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "default",
        "keyword": "default",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "default",
      "start": 2039,
      "end": 2046,
      "loc": {
        "start": {
          "line": 56,
          "column": 7
        },
        "end": {
          "line": 56,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "class",
        "keyword": "class",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "class",
      "start": 2047,
      "end": 2052,
      "loc": {
        "start": {
          "line": 56,
          "column": 15
        },
        "end": {
          "line": 56,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Transformation",
      "start": 2053,
      "end": 2067,
      "loc": {
        "start": {
          "line": 56,
          "column": 21
        },
        "end": {
          "line": 56,
          "column": 35
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2068,
      "end": 2069,
      "loc": {
        "start": {
          "line": 56,
          "column": 36
        },
        "end": {
          "line": 56,
          "column": 37
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * Creates a new transformation object\n   * \n   * @param {Class<Node>} type - the node type to match which is subclass of Node\n   * @param {string} name - the name of the transformation object, for debug purposes\n   ",
      "start": 2072,
      "end": 2296,
      "loc": {
        "start": {
          "line": 57,
          "column": 2
        },
        "end": {
          "line": 62,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "constructor",
      "start": 2299,
      "end": 2310,
      "loc": {
        "start": {
          "line": 63,
          "column": 2
        },
        "end": {
          "line": 63,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2310,
      "end": 2311,
      "loc": {
        "start": {
          "line": 63,
          "column": 13
        },
        "end": {
          "line": 63,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "type",
      "start": 2311,
      "end": 2315,
      "loc": {
        "start": {
          "line": 63,
          "column": 14
        },
        "end": {
          "line": 63,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2315,
      "end": 2316,
      "loc": {
        "start": {
          "line": 63,
          "column": 18
        },
        "end": {
          "line": 63,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "name",
      "start": 2317,
      "end": 2321,
      "loc": {
        "start": {
          "line": 63,
          "column": 20
        },
        "end": {
          "line": 63,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2321,
      "end": 2322,
      "loc": {
        "start": {
          "line": 63,
          "column": 24
        },
        "end": {
          "line": 63,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2323,
      "end": 2324,
      "loc": {
        "start": {
          "line": 63,
          "column": 26
        },
        "end": {
          "line": 63,
          "column": 27
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "* @type {Class<Node>} ",
      "start": 2329,
      "end": 2355,
      "loc": {
        "start": {
          "line": 64,
          "column": 4
        },
        "end": {
          "line": 64,
          "column": 30
        }
      }
    },
    {
      "type": {
        "label": "this",
        "keyword": "this",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "this",
      "start": 2360,
      "end": 2364,
      "loc": {
        "start": {
          "line": 65,
          "column": 4
        },
        "end": {
          "line": 65,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2364,
      "end": 2365,
      "loc": {
        "start": {
          "line": 65,
          "column": 8
        },
        "end": {
          "line": 65,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "type",
      "start": 2365,
      "end": 2369,
      "loc": {
        "start": {
          "line": 65,
          "column": 9
        },
        "end": {
          "line": 65,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 2370,
      "end": 2371,
      "loc": {
        "start": {
          "line": 65,
          "column": 14
        },
        "end": {
          "line": 65,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "type",
      "start": 2372,
      "end": 2376,
      "loc": {
        "start": {
          "line": 65,
          "column": 16
        },
        "end": {
          "line": 65,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2376,
      "end": 2377,
      "loc": {
        "start": {
          "line": 65,
          "column": 20
        },
        "end": {
          "line": 65,
          "column": 21
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "* @type {string} ",
      "start": 2382,
      "end": 2403,
      "loc": {
        "start": {
          "line": 66,
          "column": 4
        },
        "end": {
          "line": 66,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": "this",
        "keyword": "this",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "this",
      "start": 2408,
      "end": 2412,
      "loc": {
        "start": {
          "line": 67,
          "column": 4
        },
        "end": {
          "line": 67,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2412,
      "end": 2413,
      "loc": {
        "start": {
          "line": 67,
          "column": 8
        },
        "end": {
          "line": 67,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "name",
      "start": 2413,
      "end": 2417,
      "loc": {
        "start": {
          "line": 67,
          "column": 9
        },
        "end": {
          "line": 67,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 2418,
      "end": 2419,
      "loc": {
        "start": {
          "line": 67,
          "column": 14
        },
        "end": {
          "line": 67,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "name",
      "start": 2420,
      "end": 2424,
      "loc": {
        "start": {
          "line": 67,
          "column": 16
        },
        "end": {
          "line": 67,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2424,
      "end": 2425,
      "loc": {
        "start": {
          "line": 67,
          "column": 20
        },
        "end": {
          "line": 67,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2428,
      "end": 2429,
      "loc": {
        "start": {
          "line": 68,
          "column": 2
        },
        "end": {
          "line": 68,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n   * Modifies a given AST fragment with the `tool`.\n   * \n   * This is the primary function which you must implement to create a\n   * transformer. You can specifically specify the node type this executes upon\n   * through specifying the \"type\" field in the `super` call within your\n   * constructor.\n   * \n   * To run upon any time, pass `null` to the constructor. Never pass undefined\n   * to a field unless specifically noted. If you do happen to pass null you\n   * must perform type checking yourself by using `instanceof` with a node type.\n   * \n   * You likely need access to the node classes to check if a node is of a\n   * specific type, you can import this using:\n   * \n   *      import t from '../../parser/nodes';\n   * \n   * This file is automatically updated based on the directory contents at\n   * build-time.\n   * \n   * This methods execution shuold generally be controlled by a `Transformer`\n   * or a seperate parent object to interface with the delegates.\n   * \n   * @param {Node} node - The node being applied on\n   * @param {ASTTool} tool - The ASTTool for modifications\n   * \n   * @abstract\n   ",
      "start": 2433,
      "end": 3552,
      "loc": {
        "start": {
          "line": 70,
          "column": 2
        },
        "end": {
          "line": 97,
          "column": 5
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "modify",
      "start": 3555,
      "end": 3561,
      "loc": {
        "start": {
          "line": 98,
          "column": 2
        },
        "end": {
          "line": 98,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3561,
      "end": 3562,
      "loc": {
        "start": {
          "line": 98,
          "column": 8
        },
        "end": {
          "line": 98,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "node",
      "start": 3562,
      "end": 3566,
      "loc": {
        "start": {
          "line": 98,
          "column": 9
        },
        "end": {
          "line": 98,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3566,
      "end": 3567,
      "loc": {
        "start": {
          "line": 98,
          "column": 13
        },
        "end": {
          "line": 98,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "tool",
      "start": 3568,
      "end": 3572,
      "loc": {
        "start": {
          "line": 98,
          "column": 15
        },
        "end": {
          "line": 98,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3572,
      "end": 3573,
      "loc": {
        "start": {
          "line": 98,
          "column": 19
        },
        "end": {
          "line": 98,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3574,
      "end": 3575,
      "loc": {
        "start": {
          "line": 98,
          "column": 21
        },
        "end": {
          "line": 98,
          "column": 22
        }
      }
    },
    {
      "type": {
        "label": "throw",
        "keyword": "throw",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "throw",
      "start": 3580,
      "end": 3585,
      "loc": {
        "start": {
          "line": 99,
          "column": 4
        },
        "end": {
          "line": 99,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": "new",
        "keyword": "new",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "new",
      "start": 3586,
      "end": 3589,
      "loc": {
        "start": {
          "line": 99,
          "column": 10
        },
        "end": {
          "line": 99,
          "column": 13
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "TypeError",
      "start": 3590,
      "end": 3599,
      "loc": {
        "start": {
          "line": 99,
          "column": 14
        },
        "end": {
          "line": 99,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3599,
      "end": 3600,
      "loc": {
        "start": {
          "line": 99,
          "column": 23
        },
        "end": {
          "line": 99,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Must overload Transformation#modify(node, tool)",
      "start": 3600,
      "end": 3649,
      "loc": {
        "start": {
          "line": 99,
          "column": 24
        },
        "end": {
          "line": 99,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3649,
      "end": 3650,
      "loc": {
        "start": {
          "line": 99,
          "column": 73
        },
        "end": {
          "line": 99,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3650,
      "end": 3651,
      "loc": {
        "start": {
          "line": 99,
          "column": 74
        },
        "end": {
          "line": 99,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3654,
      "end": 3655,
      "loc": {
        "start": {
          "line": 100,
          "column": 2
        },
        "end": {
          "line": 100,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3656,
      "end": 3657,
      "loc": {
        "start": {
          "line": 101,
          "column": 0
        },
        "end": {
          "line": 101,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3657,
      "end": 3657,
      "loc": {
        "start": {
          "line": 101,
          "column": 1
        },
        "end": {
          "line": 101,
          "column": 1
        }
      }
    }
  ]
}