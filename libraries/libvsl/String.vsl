import libc
dynamic lin

// VSL String Class
// 
// This defined and implements the VSL String class. This class uses a `char*`
// backend while also maintaing a count of the string's length. A `CharacterView`
// is internally used to browse this String

/**
 * A "string" of characters which handles unicode, and other encoding
 * abstraction. This is a much higher level interface compared to a typical
 * `CString` which can be offered from `import libc`.
 *
 * A string's internall `CString` representation is not directly usable. While
 * it may be technically possible through the `.rawPointer`, it is not writable
 * etc. and therefore `StringView`s are used to offer a layer of abstraction
 * between the raw bytes and the viewable characters. A String can specify it's
 * encoding using the generic argument which defaults to a `UTF8View` (UTF-8).
 * You can implement the `StringView` interface to create your own encoding.
 *
 * Strings are designed to offer a layer of abstraction over their C-counterpart
 * to achieve this, most of the low-level C interfaces have been removed and are
 * marked `@unsafe`, using these will break type-safety. Be advised that in 99%
 * of senarios there is a better way to do something than use these. If you do
 * need a C-String, use `.cString` to obtain a copy of the string (a `CString`).
 */
public class String<T: StringView = UTF8View>: Equatable {

    // NOTE: Positioning of first couple fields is very important. Usually
    // this is internally defined as:
    //     struct __vsl.class.String {
    //         char* value;
    //         size_t length;
    //     }
    
    private let value: CString
    private let length: CSize
    
    /**
     * Given a C-String (optionally null-termianted) along with a defined
     * length, this will construct a String object. You _must_ ensure `length`
     * is < the amount of bytes in `CString`, otherwise a segfault will quickly
     * occur. For this purpose, use `String(from:)` which will automatically
     * call `strlen(cstring:)` from `import libc` to calculate the length of the
     * string
     * 
     * @param {CString} from - The string to source the original value of the
     *     string from
     * @param {UInt} length - An unsigned integer representing the size of the 
     *     string.
     */
    public init(from cstring: CString, length: CSize) {
        self.value = cstring
        self.length = length
    }
    
    /**
     * Utility function which constructs a high-level `String` from a low-level
     * `CString` object; this automatically calls `strlen(cstring:)` and merely
     * delegates it to `String(from:length:)`
     * 
     * 
     * If the source bytes cannot be a valid UTF-8 String, use a `Buffer` or
     * remain as a `CString` object which is merely an alias for `Pointer<Char>`
     *
     * @param {CString} from - The desired C-String to initalize a string from.
     *     Note: It must be a valid UTF-8 String or errors will occur.
     */
    public init(from cstring: CString) {
        self.init(from: cstring, length: strlen(cstring: cstring))
    }
    
    
    
    
    /**
     * A direct function for accessing a `Char` at a specific index. This is a
     * no-BS function and trivially moves and dereferences a pointer.
     * 
     * Might be internally implemented along the lines of:
     * 
     *     define i8 @"String.byte"("String", i32) alwaysinline {
     *         %2 = zest i32 %1 to i64
     *         %3 = getelementptr i8*, i8* %0, i64 %2
     *         %4 = load i8, i8* %3
     *         ret %4
     *     }
     * 
     * @param {Int} at - the relative byte offset to the beginning to access.
     *     Must be < the internal length
     * 
     * @return {Char} the byte (`i8`)
     */
    @inline @unsafe
    public func byte(at index: Int64) -> Char {
        // Copy pointer, increment by `index`
        let ptr: Pointer<Char> = self.value.getptr(at: index)
        
        // Return the value
        return ptr.dereference()
    }
    
    /**
     * Returns a raw pointer which points to the raw underlying C-String. Do NOT
     * modify because only bad things will happen. Use the byte-modification
     * methods rather than using this for any other reason.
     *
     * Basically only use to pass to C functions which need a C-String
     */
    @unsafe
    public var rawPointer: CString { return self.value }
    
    /**
     * Obtains a copy of the string as a C-String, calls `strcpy` to alloate
     * a new string, and returns the pointer.
     */
    public var cString: CString {
        var s2: CString
        strcpy(s1: self.value, s2: s2)
        return s2
    }
    
    
    
    
    // Internally maintains a CharacterView of this string
    private lazy let characterView: T = T(of: self)
    
    /**
     * Determine the UTF-8 length of this string. This means glyphs such as
     * emojis are ony counted as one byte. If you wish to have a byte-count,
     * refer to the `.bytes` field.
     */
    public var length: Int { return self.characterView.length }
    
    
    
    
    /**
     * Compares equality of strings by bytes. Internally uses `strcmp` and
     * checks for a return of zero
     */
    public static func ==(lhs: String, rhs: String) -> Bool {
        return strcmp(s1: lhs.value, s2: rhs.value) == 0
    }
    
    /**
     * Compares equality of strings by bytes. Internally uses `strcmp` and
     * checks for a return of a value greater than zero
     */
    public static func >(lhs: String, rhs: String) -> Bool {
        return strcmp(s1: lhs.value, s2: rhs.value) > 0
    }
    
    /**
     * Compares equality of strings by bytes. Internally uses `strcmp` and
     * checks for a return of a value less than zero
     */
    public static func <(lhs: String, rhs: String) -> Bool {
        return strcmp(s1: lhs.value, s2: rhs.value) < 0
    }
}